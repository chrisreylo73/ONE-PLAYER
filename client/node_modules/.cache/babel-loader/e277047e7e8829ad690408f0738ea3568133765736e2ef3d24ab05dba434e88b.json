{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./components/useAuth\";\nimport Player from \"./components/Player\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Tracks from \"./components/Tracks\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport MediaPanel from \"./components/MediaPanel\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"8b945ef10ea24755b83ac50cede405a0\"\n});\nexport default function Dashboard() {\n  _s();\n  /**-----------------------------------------------------------------------------------------------------------------------\r\n   *                                                    SPOTIFY\r\n   *-----------------------------------------------------------------------------------------------------------------------**/\n  const [code, setCode] = useState(null);\n  // const accessToken = useAuth(code);\n  const [currentTrack, setCurrentTrack] = useState();\n  const [platform, setPlatform] = useState(null);\n  const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  const [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n  const [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n  const [accessToken, setAccessToken] = useState();\n  const [refreshToken, setRefreshToken] = useState();\n  const [expiresIn, setExpiresIn] = useState();\n  useEffect(() => {\n    if (code !== null) {\n      axios.post(\"http://localhost:3001/login\", {\n        code\n      }).then(res => {\n        setAccessToken(res.data.accessToken);\n        setRefreshToken(res.data.refreshToken);\n        setExpiresIn(res.data.expiresIn);\n        window.history.pushState({}, null, \"/\");\n      }).catch(() => {\n        window.location = \"/\";\n      });\n    }\n  }, [code]);\n  useEffect(() => {\n    if (!refreshToken || !expiresIn) return;\n    const interval = setInterval(() => {\n      axios.post(\"http://localhost:3001/refresh\", {\n        refreshToken\n      }).then(res => {\n        setAccessToken(res.data.accessToken);\n        setExpiresIn(res.data.expiresIn);\n      }).catch(() => {\n        window.location = \"/\";\n      });\n    }, (expiresIn - 60) * 1000);\n    return () => clearInterval(interval);\n  }, [refreshToken, expiresIn]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n    fetchPlaylists();\n  }, [accessToken]);\n  const spotifyLogin = () => {\n    setCode(new URLSearchParams(window.location.search).get(\"code\"));\n  };\n  const fetchPlaylists = async () => {\n    try {\n      let playlists = [];\n      let nextUrl = `${API_BASE_URL}/me/playlists`;\n      while (nextUrl) {\n        const response = await fetch(nextUrl, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          playlists = playlists.concat(data.items);\n          nextUrl = data.next; // Get the URL for the next page of playlists\n        } else {\n          console.log(\"Error:\", response.status);\n          break; // Stop fetching if there's an error\n        }\n      }\n\n      setSpotifyPlaylists(playlists);\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n  const fetchPlaylistTracks = async playlistId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setSpotifyPlaylistTracks(data.items);\n      } else {\n        console.log(\"Error:\", response.status);\n      }\n    } catch (error) {\n      console.log(\"Error:\", error);\n    }\n  };\n  const spotifyHandlePlaylistSelect = async playlist => {\n    setSpotifySelectedPlaylist(playlist);\n    await fetchPlaylistTracks(playlist.id);\n  };\n  const spotifyDeselectPlaylist = () => {\n    console.log(\"Deselect\");\n    setSpotifySelectedPlaylist(null);\n  };\n  const spotifyChooseTrack = track => {\n    setCurrentTrack(track);\n  };\n\n  /**-----------------------------------------------------------------------------------------------------------------------\r\n   *                                                    YOUTUBE\r\n   *-----------------------------------------------------------------------------------------------------------------------**/\n  const [player, setPlayer] = useState(null);\n  const [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n  const [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n  const [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n  const [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n  const fetchYoutubePlaylistTracks = async playlistId => {\n    setYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n  };\n  const youtubeHandlePlaylistSelect = async playlist => {\n    setYouTubeSelectedPlaylist(playlist);\n    console.log(\"hello\");\n    await fetchYoutubePlaylistTracks(playlist.id);\n  };\n  const handlePlayerReady = event => {\n    setPlayer(event.target);\n    // setYoutubeCurrentIndex(0);\n    console.log(\"Player Ready:\", event.target);\n  };\n  const youtubeChooseTrack = songId => {\n    console.log(songId);\n    setYoutubeIsPlaying(true);\n    setYoutubeCurrentIndex(songId);\n  };\n  const handlePlay = () => {\n    setYoutubeIsPlaying(true);\n    player.playVideo();\n  };\n  const handlePause = () => {\n    setYoutubeIsPlaying(false);\n    player.pauseVideo();\n  };\n  const handleNext = youtubePlaylist => {\n    setYoutubeCurrentIndex(prevIndex => (prevIndex + 1) % youtubePlaylist.length);\n  };\n  const handlePrevious = youtubePlaylist => {\n    setYoutubeCurrentIndex(prevIndex => {\n      const newIndex = prevIndex - 1;\n      return newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n    });\n  };\n  const handlePlaylistEnd = () => {\n    setYoutubeCurrentIndex(0);\n  };\n  const youtubePlaylists = [{\n    playlistTitle: \"Brett Emmons\",\n    id: 0,\n    songs: [{\n      name: \"Bull and the Matador\",\n      artist: \"Brett Emmons\",\n      url: \"ZWVGr7cQZ_Y\",\n      songId: 0\n    }, {\n      name: \"Shambles\",\n      artist: \"Brett Emmons\",\n      url: \"Ti4blSWS6bY\",\n      songId: 1\n    }, {\n      name: \"Heavy\",\n      artist: \"Brett Emmons\",\n      url: \"8puqbXK3k-w\",\n      songId: 2\n    }]\n  }, {\n    playlistTitle: \"J.Cole\",\n    id: 1,\n    songs: [{\n      name: \"i'm a Fool\",\n      artist: \"J.cole\",\n      url: \"mgRzTTMLfEs\",\n      songId: 0\n    }, {\n      name: \"Can I Holla At you\",\n      artist: \"J.cole\",\n      url: \"v9ejF5AumDk\",\n      songId: 1\n    }, {\n      name: \"It Won't Be Long\",\n      artist: \"J.cole\",\n      url: \"jNBXU26tRDY\",\n      songId: 2\n    }]\n  }\n  // { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n  ];\n\n  const spotifyTrackURIs = spotifyPlaylistTracks.map(playlistTrack => playlistTrack.track.uri);\n  const playlistAlbumCovers = spotifyPlaylistTracks.map(playlistTrack => playlistTrack.track.album.images[0].url);\n  // console.log(playlistAlbumCovers);\n  // console.log(currentTrack);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      spotifyPlaylists: spotifyPlaylists,\n      youtubePlaylists: youtubePlaylists,\n      spotifyHandlePlaylistSelect: spotifyHandlePlaylistSelect,\n      youtubeHandlePlaylistSelect: youtubeHandlePlaylistSelect,\n      setSpotifySelectedPlaylist: setSpotifySelectedPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MediaPanel, {\n      accessToken: accessToken,\n      trackUri: currentTrack === null || currentTrack === void 0 ? void 0 : currentTrack.uri,\n      playlistUri: spotifyTrackURIs,\n      playlistAlbumCovers: playlistAlbumCovers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Tracks, {\n      spotifySelectedPlaylist: spotifySelectedPlaylist,\n      spotifyPlaylistTracks: spotifyPlaylistTracks,\n      spotifyChooseTrack: spotifyChooseTrack,\n      youtubeSelectedPlaylist: youtubeSelectedPlaylist,\n      youtubePlaylistTracks: youtubePlaylistTracks,\n      youtubeChooseTrack: youtubeChooseTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 3\n  }, this);\n}\n_s(Dashboard, \"KajidNuO2lz+tWgRbZXdiwUiBGU=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","useAuth","Player","SpotifyWebApi","Tracks","ControlPanel","MediaPanel","axios","jsxDEV","_jsxDEV","API_BASE_URL","spotifyApi","clientId","Dashboard","_s","code","setCode","currentTrack","setCurrentTrack","platform","setPlatform","spotifyPlaylists","setSpotifyPlaylists","spotifySelectedPlaylist","setSpotifySelectedPlaylist","spotifyPlaylistTracks","setSpotifyPlaylistTracks","accessToken","setAccessToken","refreshToken","setRefreshToken","expiresIn","setExpiresIn","post","then","res","data","window","history","pushState","catch","location","interval","setInterval","clearInterval","fetchPlaylists","spotifyLogin","URLSearchParams","search","get","playlists","nextUrl","response","fetch","headers","Authorization","ok","json","concat","items","next","console","log","status","error","fetchPlaylistTracks","playlistId","spotifyHandlePlaylistSelect","playlist","id","spotifyDeselectPlaylist","spotifyChooseTrack","track","player","setPlayer","youtubeCurrentIndex","setYoutubeCurrentIndex","youtubeIsPlaying","setYoutubeIsPlaying","youtubePlaylistTracks","setYoutubePlaylistTracks","youtubeSelectedPlaylist","setYouTubeSelectedPlaylist","fetchYoutubePlaylistTracks","youtubePlaylists","songs","youtubeHandlePlaylistSelect","handlePlayerReady","event","target","youtubeChooseTrack","songId","handlePlay","playVideo","handlePause","pauseVideo","handleNext","youtubePlaylist","prevIndex","length","handlePrevious","newIndex","handlePlaylistEnd","playlistTitle","name","artist","url","spotifyTrackURIs","map","playlistTrack","uri","playlistAlbumCovers","album","images","className","children","fileName","_jsxFileName","lineNumber","columnNumber","trackUri","playlistUri","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nimport useAuth from \"./components/useAuth\";\r\nimport Player from \"./components/Player\";\r\nimport SpotifyWebApi from \"spotify-web-api-node\";\r\nimport Tracks from \"./components/Tracks\";\r\nimport ControlPanel from \"./components/ControlPanel\";\r\nimport MediaPanel from \"./components/MediaPanel\";\r\nimport axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n\tclientId: \"8b945ef10ea24755b83ac50cede405a0\",\r\n});\r\n\r\nexport default function Dashboard() {\r\n\t/**-----------------------------------------------------------------------------------------------------------------------\r\n\t *                                                    SPOTIFY\r\n\t *-----------------------------------------------------------------------------------------------------------------------**/\r\n\tconst [code, setCode] = useState(null);\r\n\t// const accessToken = useAuth(code);\r\n\tconst [currentTrack, setCurrentTrack] = useState();\r\n\tconst [platform, setPlatform] = useState(null);\r\n\tconst [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\r\n\tconst [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\r\n\tconst [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\r\n\r\n\tconst [accessToken, setAccessToken] = useState();\r\n\tconst [refreshToken, setRefreshToken] = useState();\r\n\tconst [expiresIn, setExpiresIn] = useState();\r\n\r\n\tuseEffect(() => {\r\n\t\tif (code !== null) {\r\n\t\t\taxios\r\n\t\t\t\t.post(\"http://localhost:3001/login\", {\r\n\t\t\t\t\tcode,\r\n\t\t\t\t})\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsetAccessToken(res.data.accessToken);\r\n\t\t\t\t\tsetRefreshToken(res.data.refreshToken);\r\n\t\t\t\t\tsetExpiresIn(res.data.expiresIn);\r\n\t\t\t\t\twindow.history.pushState({}, null, \"/\");\r\n\t\t\t\t})\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\twindow.location = \"/\";\r\n\t\t\t\t});\r\n\t\t}\r\n\t}, [code]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!refreshToken || !expiresIn) return;\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\taxios\r\n\t\t\t\t.post(\"http://localhost:3001/refresh\", {\r\n\t\t\t\t\trefreshToken,\r\n\t\t\t\t})\r\n\t\t\t\t.then((res) => {\r\n\t\t\t\t\tsetAccessToken(res.data.accessToken);\r\n\t\t\t\t\tsetExpiresIn(res.data.expiresIn);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(() => {\r\n\t\t\t\t\twindow.location = \"/\";\r\n\t\t\t\t});\r\n\t\t}, (expiresIn - 60) * 1000);\r\n\r\n\t\treturn () => clearInterval(interval);\r\n\t}, [refreshToken, expiresIn]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!accessToken) return;\r\n\t\tspotifyApi.setAccessToken(accessToken);\r\n\t\tfetchPlaylists();\r\n\t}, [accessToken]);\r\n\r\n\tconst spotifyLogin = () => {\r\n\t\tsetCode(new URLSearchParams(window.location.search).get(\"code\"));\r\n\t};\r\n\r\n\tconst fetchPlaylists = async () => {\r\n\t\ttry {\r\n\t\t\tlet playlists = [];\r\n\t\t\tlet nextUrl = `${API_BASE_URL}/me/playlists`;\r\n\r\n\t\t\twhile (nextUrl) {\r\n\t\t\t\tconst response = await fetch(nextUrl, {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\r\n\t\t\t\t\t},\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (response.ok) {\r\n\t\t\t\t\tconst data = await response.json();\r\n\t\t\t\t\tplaylists = playlists.concat(data.items);\r\n\t\t\t\t\tnextUrl = data.next; // Get the URL for the next page of playlists\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(\"Error:\", response.status);\r\n\t\t\t\t\tbreak; // Stop fetching if there's an error\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsetSpotifyPlaylists(playlists);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"Error:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst fetchPlaylistTracks = async (playlistId) => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tif (response.ok) {\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tsetSpotifyPlaylistTracks(data.items);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Error:\", response.status);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\"Error:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst spotifyHandlePlaylistSelect = async (playlist) => {\r\n\t\tsetSpotifySelectedPlaylist(playlist);\r\n\t\tawait fetchPlaylistTracks(playlist.id);\r\n\t};\r\n\r\n\tconst spotifyDeselectPlaylist = () => {\r\n\t\tconsole.log(\"Deselect\");\r\n\t\tsetSpotifySelectedPlaylist(null);\r\n\t};\r\n\r\n\tconst spotifyChooseTrack = (track) => {\r\n\t\tsetCurrentTrack(track);\r\n\t};\r\n\r\n\t/**-----------------------------------------------------------------------------------------------------------------------\r\n\t *                                                    YOUTUBE\r\n\t *-----------------------------------------------------------------------------------------------------------------------**/\r\n\tconst [player, setPlayer] = useState(null);\r\n\tconst [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\r\n\tconst [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\r\n\tconst [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\r\n\tconst [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\r\n\r\n\tconst fetchYoutubePlaylistTracks = async (playlistId) => {\r\n\t\tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\r\n\t};\r\n\tconst youtubeHandlePlaylistSelect = async (playlist) => {\r\n\t\tsetYouTubeSelectedPlaylist(playlist);\r\n\t\tconsole.log(\"hello\");\r\n\t\tawait fetchYoutubePlaylistTracks(playlist.id);\r\n\t};\r\n\tconst handlePlayerReady = (event) => {\r\n\t\tsetPlayer(event.target);\r\n\t\t// setYoutubeCurrentIndex(0);\r\n\t\tconsole.log(\"Player Ready:\", event.target);\r\n\t};\r\n\tconst youtubeChooseTrack = (songId) => {\r\n\t\tconsole.log(songId);\r\n\t\tsetYoutubeIsPlaying(true);\r\n\t\tsetYoutubeCurrentIndex(songId);\r\n\t};\r\n\r\n\tconst handlePlay = () => {\r\n\t\tsetYoutubeIsPlaying(true);\r\n\t\tplayer.playVideo();\r\n\t};\r\n\r\n\tconst handlePause = () => {\r\n\t\tsetYoutubeIsPlaying(false);\r\n\t\tplayer.pauseVideo();\r\n\t};\r\n\r\n\tconst handleNext = (youtubePlaylist) => {\r\n\t\tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\r\n\t};\r\n\r\n\tconst handlePrevious = (youtubePlaylist) => {\r\n\t\tsetYoutubeCurrentIndex((prevIndex) => {\r\n\t\t\tconst newIndex = prevIndex - 1;\r\n\t\t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\r\n\t\t});\r\n\t};\r\n\r\n\tconst handlePlaylistEnd = () => {\r\n\t\tsetYoutubeCurrentIndex(0);\r\n\t};\r\n\r\n\tconst youtubePlaylists = [\r\n\t\t{\r\n\t\t\tplaylistTitle: \"Brett Emmons\",\r\n\t\t\tid: 0,\r\n\t\t\tsongs: [\r\n\t\t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\r\n\t\t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\r\n\t\t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\r\n\t\t\t],\r\n\t\t},\r\n\t\t{\r\n\t\t\tplaylistTitle: \"J.Cole\",\r\n\t\t\tid: 1,\r\n\t\t\tsongs: [\r\n\t\t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\r\n\t\t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\r\n\t\t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\r\n\t\t\t],\r\n\t\t},\r\n\t\t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\r\n\t];\r\n\r\n\tconst spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\r\n\tconst playlistAlbumCovers = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.album.images[0].url);\r\n\t// console.log(playlistAlbumCovers);\r\n\t// console.log(currentTrack);\r\n\r\n\treturn (\r\n\t\t<div className=\"dashboard\">\r\n\t\t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} setSpotifySelectedPlaylist={setSpotifySelectedPlaylist} />\r\n\t\t\t<MediaPanel accessToken={accessToken} trackUri={currentTrack?.uri} playlistUri={spotifyTrackURIs} playlistAlbumCovers={playlistAlbumCovers} />\r\n\t\t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} />\r\n\r\n\t\t\t{/* {youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />} */}\r\n\r\n\t\t\t{/* <div className=\"Spotify-Player\"> */}\r\n\t\t\t{/* <SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer> */}\r\n\r\n\t\t\t{/* </div> */}\r\n\t\t</div>\r\n\t);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}