{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\YoutubeAuth.jsx\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState } from \"react\";\n// // import { google } from \"googleapis\";\n\n// const YouTubeAuth = ({ clientId, clientSecret }) => {\n// \tconst [isSignedIn, setIsSignedIn] = useState(false);\n// \tconst [playlists, setPlaylists] = useState([]);\n\n// \tconst authenticate = async () => {\n// \t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\n\n// \t\t// Redirect to Google's OAuth2 consent screen\n// \t\tconst authUrl = oauth2Client.generateAuthUrl({\n// \t\t\taccess_type: \"offline\",\n// \t\t\tscope: [\"https://www.googleapis.com/auth/youtube.readonly\"],\n// \t\t});\n\n// \t\twindow.location.href = authUrl;\n// \t};\n\n// \tconst getPlaylists = async (accessToken) => {\n// \t\tconst youtube = google.youtube(\"v3\");\n// \t\tconst res = await youtube.playlists.list({\n// \t\t\tauth: accessToken,import React, { useState, useEffect } from 'react';\n\nconst YouTubeAuth = ({\n  clientId,\n  clientSecret\n}) => {\n  _s();\n  const [isSignedIn, setIsSignedIn] = useState(false);\n  const [playlists, setPlaylists] = useState([]);\n  const authenticate = () => {\n    // Redirect to Google's OAuth2 consent screen\n    const authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${encodeURIComponent(window.location.origin + \"/callback\")}&response_type=code&scope=https://www.googleapis.com/auth/youtube.readonly`;\n    window.location.href = authUrl;\n  };\n  const getPlaylists = async accessToken => {\n    try {\n      const response = await fetch(\"https://www.googleapis.com/youtube/v3/playlists\", {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setPlaylists(data.items);\n      } else {\n        console.error(\"Failed to fetch playlists:\", response.status, response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n  useEffect(() => {\n    // Get the access token from the URL after successful authentication\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get(\"code\");\n    if (code) {\n      // Exchange the code for an access token\n      const formData = new URLSearchParams();\n      formData.append(\"client_id\", clientId);\n      formData.append(\"client_secret\", clientSecret);\n      formData.append(\"code\", code);\n      formData.append(\"redirect_uri\", window.location.origin + \"/callback\");\n      formData.append(\"grant_type\", \"authorization_code\");\n      fetch(\"https://accounts.google.com/o/oauth2/token\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        body: formData\n      }).then(response => response.json()).then(data => {\n        if (data.access_token) {\n          setIsSignedIn(true);\n          getPlaylists(data.access_token);\n        }\n      }).catch(error => console.error(\"Error exchanging code for access token:\", error));\n    }\n  }, [clientId, clientSecret]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isSignedIn ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: authenticate,\n      children: \"Sign In with YouTube\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"My Playlists:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: playlists.map(playlist => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: playlist.snippet.title\n        }, playlist.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 3\n  }, this);\n};\n_s(YouTubeAuth, \"9zJQSfioSpRTDbuaTEbTDQad2fo=\");\n_c = YouTubeAuth;\nexport default YouTubeAuth;\n\n// \t\t\tpart: \"snippet\",\n// \t\t\tmine: true,\n// \t\t});\n\n// \t\tsetPlaylists(res.data.items);\n// \t};\n\n// \tReact.useEffect(() => {\n// \t\t// Get the access token from the URL after successful authentication\n// \t\tconst urlParams = new URLSearchParams(window.location.search);\n// \t\tconst code = urlParams.get(\"code\");\n\n// \t\tif (code) {\n// \t\t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\n\n// \t\t\t// Get access token and refresh token\n// \t\t\toauth2Client.getToken(code, (err, token) => {\n// \t\t\t\tif (err) {\n// \t\t\t\t\tconsole.error(\"Error getting access token:\", err);\n// \t\t\t\t} else {\n// \t\t\t\t\toauth2Client.setCredentials(token);\n// \t\t\t\t\tgetPlaylists(token.access_token);\n// \t\t\t\t\tsetIsSignedIn(true);\n// \t\t\t\t}\n// \t\t\t});\n// \t\t}\n// \t}, [clientId, clientSecret]);\n\n// \treturn (\n// \t\t<div>\n// \t\t\t{!isSignedIn ? (\n// \t\t\t\t<button onClick={authenticate}>Sign In with YouTube</button>\n// \t\t\t) : (\n// \t\t\t\t<div>\n// \t\t\t\t\t<h2>My Playlists:</h2>\n// \t\t\t\t\t<ul>\n// \t\t\t\t\t\t{playlists.map((playlist) => (\n// \t\t\t\t\t\t\t<li key={playlist.id}>{playlist.snippet.title}</li>\n// \t\t\t\t\t\t))}\n// \t\t\t\t\t</ul>\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t</div>\n// \t);\n// };\n\n// export default YouTubeAuth;\nvar _c;\n$RefreshReg$(_c, \"YouTubeAuth\");","map":{"version":3,"names":["YouTubeAuth","clientId","clientSecret","_s","isSignedIn","setIsSignedIn","useState","playlists","setPlaylists","authenticate","authUrl","encodeURIComponent","window","location","origin","href","getPlaylists","accessToken","response","fetch","headers","Authorization","ok","data","json","items","console","error","status","statusText","useEffect","urlParams","URLSearchParams","search","code","get","formData","append","method","body","then","access_token","catch","_jsxDEV","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","playlist","snippet","title","id","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/YoutubeAuth.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// // import { google } from \"googleapis\";\r\n\r\n// const YouTubeAuth = ({ clientId, clientSecret }) => {\r\n// \tconst [isSignedIn, setIsSignedIn] = useState(false);\r\n// \tconst [playlists, setPlaylists] = useState([]);\r\n\r\n// \tconst authenticate = async () => {\r\n// \t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\r\n\r\n// \t\t// Redirect to Google's OAuth2 consent screen\r\n// \t\tconst authUrl = oauth2Client.generateAuthUrl({\r\n// \t\t\taccess_type: \"offline\",\r\n// \t\t\tscope: [\"https://www.googleapis.com/auth/youtube.readonly\"],\r\n// \t\t});\r\n\r\n// \t\twindow.location.href = authUrl;\r\n// \t};\r\n\r\n// \tconst getPlaylists = async (accessToken) => {\r\n// \t\tconst youtube = google.youtube(\"v3\");\r\n// \t\tconst res = await youtube.playlists.list({\r\n// \t\t\tauth: accessToken,import React, { useState, useEffect } from 'react';\r\n\r\nconst YouTubeAuth = ({ clientId, clientSecret }) => {\r\n\tconst [isSignedIn, setIsSignedIn] = useState(false);\r\n\tconst [playlists, setPlaylists] = useState([]);\r\n\r\n\tconst authenticate = () => {\r\n\t\t// Redirect to Google's OAuth2 consent screen\r\n\t\tconst authUrl = `https://accounts.google.com/o/oauth2/auth?client_id=${clientId}&redirect_uri=${encodeURIComponent(window.location.origin + \"/callback\")}&response_type=code&scope=https://www.googleapis.com/auth/youtube.readonly`;\r\n\r\n\t\twindow.location.href = authUrl;\r\n\t};\r\n\r\n\tconst getPlaylists = async (accessToken) => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(\"https://www.googleapis.com/youtube/v3/playlists\", {\r\n\t\t\t\theaders: {\r\n\t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tif (response.ok) {\r\n\t\t\t\tconst data = await response.json();\r\n\t\t\t\tsetPlaylists(data.items);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(\"Failed to fetch playlists:\", response.status, response.statusText);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(\"Error fetching data:\", error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t// Get the access token from the URL after successful authentication\r\n\t\tconst urlParams = new URLSearchParams(window.location.search);\r\n\t\tconst code = urlParams.get(\"code\");\r\n\r\n\t\tif (code) {\r\n\t\t\t// Exchange the code for an access token\r\n\t\t\tconst formData = new URLSearchParams();\r\n\t\t\tformData.append(\"client_id\", clientId);\r\n\t\t\tformData.append(\"client_secret\", clientSecret);\r\n\t\t\tformData.append(\"code\", code);\r\n\t\t\tformData.append(\"redirect_uri\", window.location.origin + \"/callback\");\r\n\t\t\tformData.append(\"grant_type\", \"authorization_code\");\r\n\r\n\t\t\tfetch(\"https://accounts.google.com/o/oauth2/token\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\",\r\n\t\t\t\t},\r\n\t\t\t\tbody: formData,\r\n\t\t\t})\r\n\t\t\t\t.then((response) => response.json())\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tif (data.access_token) {\r\n\t\t\t\t\t\tsetIsSignedIn(true);\r\n\t\t\t\t\t\tgetPlaylists(data.access_token);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => console.error(\"Error exchanging code for access token:\", error));\r\n\t\t}\r\n\t}, [clientId, clientSecret]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{!isSignedIn ? (\r\n\t\t\t\t<button onClick={authenticate}>Sign In with YouTube</button>\r\n\t\t\t) : (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>My Playlists:</h2>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{playlists.map((playlist) => (\r\n\t\t\t\t\t\t\t<li key={playlist.id}>{playlist.snippet.title}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default YouTubeAuth;\r\n\r\n// \t\t\tpart: \"snippet\",\r\n// \t\t\tmine: true,\r\n// \t\t});\r\n\r\n// \t\tsetPlaylists(res.data.items);\r\n// \t};\r\n\r\n// \tReact.useEffect(() => {\r\n// \t\t// Get the access token from the URL after successful authentication\r\n// \t\tconst urlParams = new URLSearchParams(window.location.search);\r\n// \t\tconst code = urlParams.get(\"code\");\r\n\r\n// \t\tif (code) {\r\n// \t\t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\r\n\r\n// \t\t\t// Get access token and refresh token\r\n// \t\t\toauth2Client.getToken(code, (err, token) => {\r\n// \t\t\t\tif (err) {\r\n// \t\t\t\t\tconsole.error(\"Error getting access token:\", err);\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\toauth2Client.setCredentials(token);\r\n// \t\t\t\t\tgetPlaylists(token.access_token);\r\n// \t\t\t\t\tsetIsSignedIn(true);\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n// \t\t}\r\n// \t}, [clientId, clientSecret]);\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t{!isSignedIn ? (\r\n// \t\t\t\t<button onClick={authenticate}>Sign In with YouTube</button>\r\n// \t\t\t) : (\r\n// \t\t\t\t<div>\r\n// \t\t\t\t\t<h2>My Playlists:</h2>\r\n// \t\t\t\t\t<ul>\r\n// \t\t\t\t\t\t{playlists.map((playlist) => (\r\n// \t\t\t\t\t\t\t<li key={playlist.id}>{playlist.snippet.title}</li>\r\n// \t\t\t\t\t\t))}\r\n// \t\t\t\t\t</ul>\r\n// \t\t\t\t</div>\r\n// \t\t\t)}\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default YouTubeAuth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}