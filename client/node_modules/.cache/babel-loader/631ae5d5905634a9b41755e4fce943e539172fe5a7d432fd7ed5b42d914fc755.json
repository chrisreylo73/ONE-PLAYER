{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\chris\\Desktop\\spotify-clone-main\\client\\node_modules\\react-spotify-web-playback\\src\\types\\common.ts"],"sourcesContent":["/* eslint-disable camelcase */\nimport * as React from 'react';\n\nimport { SpotifyDevice, SpotifyPlayerTrack, WebPlaybackTrack } from './spotify';\n\nexport type PlainObject<T = any> = Record<string, T>;\n\nexport interface CallbackState extends State {\n  type: string;\n}\n\nexport interface Props {\n  autoPlay?: boolean;\n  callback?: (state: CallbackState) => any;\n  initialVolume?: number;\n  magnifySliderOnHover?: boolean;\n  name?: string;\n  offset?: number;\n  persistDeviceSelection?: boolean;\n  play?: boolean;\n  showSaveIcon?: boolean;\n  styles?: StylesProps;\n  syncExternalDevice?: boolean;\n  syncExternalDeviceInterval?: number;\n  token: string;\n  updateSavedStatus?: (fn: (status: boolean) => any) => any;\n  uris?: string | string[];\n}\n\nexport interface State {\n  currentDeviceId: string;\n  deviceId: string;\n  devices: SpotifyDevice[];\n  error: string;\n  errorType: string;\n  isActive: boolean;\n  isInitializing: boolean;\n  isMagnified: boolean;\n  isPlaying: boolean;\n  isSaved: boolean;\n  isUnsupported: boolean;\n  needsUpdate: boolean;\n  nextTracks: WebPlaybackTrack[];\n  playerPosition: 'bottom' | 'top';\n  position: number;\n  previousTracks: WebPlaybackTrack[];\n  progressMs: number;\n  status: string;\n  track: SpotifyPlayerTrack;\n  volume: number;\n}\n\nexport interface PlayOptions {\n  context_uri?: string;\n  uris?: string[];\n}\n\nexport interface StylesOptions {\n  activeColor: string;\n  altColor: string;\n  bgColor: string;\n  color: string;\n  errorColor: string;\n  height: number | string;\n  loaderColor: string;\n  loaderSize: number | string;\n  sliderColor: string;\n  sliderHandleBorderRadius: number | string;\n  sliderHandleColor: string;\n  sliderHeight: number;\n  sliderTrackBorderRadius: number | string;\n  sliderTrackColor: string;\n  trackArtistColor: string;\n  trackNameColor: string;\n}\n\nexport type StylesProps = Partial<StylesOptions>;\n\nexport interface ComponentsProps {\n  [key: string]: any;\n  children?: React.ReactNode;\n  styles: StylesOptions;\n}\n\nexport interface StyledProps {\n  [key: string]: any;\n  style: Record<string, any>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}