{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// import useAuth from \"./components/useAuth\";\n// import SpotifyWebApi from \"spotify-web-api-node\";\n// import Tracks from \"./components/Tracks\";\n// import ControlPanel from \"./components/ControlPanel\";\n// import YoutubePlayer from \"./components/YoutubePlayer\";\n// import SpotifyPlayer from \"./components/SpotifyPlayer\";\n// import MediaPanel from \"./components/MediaPanel\";\n// import YoutubeAuth from \"./components/YoutubeAuth\";\n// import Login from \"./Login\";\n\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"8b945ef10ea24755b83ac50cede405a0\"\n});\nexport default function Dashboard() {\n  /**-----------------------------------------------------------------------------------------------------------------------\n   *                                                    SPOTIFY\n   *-----------------------------------------------------------------------------------------------------------------------**/\n\n  // const code = new URLSearchParams(window.location.search).get(\"code\");\n  // const accessToken = useAuth(code);\n  // const [currentTrack, setCurrentTrack] = useState();\n  // const [platform, setPlatform] = useState(null);\n  // const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  // const [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n  // const [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n  // const [isSpotifySong, setIsSpotifySong] = useState(false);\n\n  // useEffect(() => {\n  // \tif (!accessToken) return;\n  // \tspotifyApi.setAccessToken(accessToken);\n  // \tfetchPlaylists();\n  // }, [accessToken]);\n\n  // const fetchPlaylists = async () => {\n  // \ttry {\n  // \t\tlet playlists = [];\n  // \t\tlet nextUrl = `${API_BASE_URL}/me/playlists`;\n\n  // \t\twhile (nextUrl) {\n  // \t\t\tconst response = await fetch(nextUrl, {\n  // \t\t\t\theaders: {\n  // \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n  // \t\t\t\t},\n  // \t\t\t});\n\n  // \t\t\tif (response.ok) {\n  // \t\t\t\tconst data = await response.json();\n  // \t\t\t\tplaylists = playlists.concat(data.items);\n  // \t\t\t\tnextUrl = data.next; // Get the URL for the next page of playlists\n  // \t\t\t} else {\n  // \t\t\t\tconsole.log(\"Error:\", response.status);\n  // \t\t\t\tbreak; // Stop fetching if there's an error\n  // \t\t\t}\n  // \t\t}\n\n  // \t\tsetSpotifyPlaylists(playlists);\n  // \t} catch (error) {\n  // \t\tconsole.log(\"Error:\", error);\n  // \t}\n  // };\n\n  // const fetchPlaylistTracks = async (playlistId) => {\n  // \ttry {\n  // \t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n  // \t\t\theaders: {\n  // \t\t\t\tAuthorization: `Bearer ${accessToken}`,\n  // \t\t\t},\n  // \t\t});\n\n  // \t\tif (response.ok) {\n  // \t\t\tconst data = await response.json();\n  // \t\t\tsetSpotifyPlaylistTracks(data.items);\n  // \t\t} else {\n  // \t\t\tconsole.log(\"Error:\", response.status);\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(\"Error:\", error);\n  // \t}\n  // };\n\n  // const spotifyHandlePlaylistSelect = async (playlist) => {\n  // \tsetSpotifySelectedPlaylist(playlist);\n  // \tawait fetchPlaylistTracks(playlist.id);\n  // };\n\n  // const spotifyDeselectPlaylist = () => {\n  // \tconsole.log(\"Deselect\");\n  // \tsetSpotifySelectedPlaylist(null);\n  // };\n\n  // const spotifyChooseTrack = (track) => {\n  // \tsetCurrentTrack(track);\n  // };\n\n  // /**-----------------------------------------------------------------------------------------------------------------------\n  //  *                                                    YOUTUBE\n  //  *-----------------------------------------------------------------------------------------------------------------------**/\n\n  // const [player, setPlayer] = useState(null);\n  // const [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n  // const [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n  // const [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n  // const [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n  // const fetchYoutubePlaylistTracks = async (playlistId) => {\n  // \tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n  // };\n  // const youtubeHandlePlaylistSelect = async (playlist) => {\n  // \tsetYouTubeSelectedPlaylist(playlist);\n  // \tconsole.log(\"hello\");\n  // \tawait fetchYoutubePlaylistTracks(playlist.id);\n  // };\n  // const handlePlayerReady = (event) => {\n  // \tsetPlayer(event.target);\n  // \t// setYoutubeCurrentIndex(0);\n  // \tconsole.log(\"Player Ready:\", event.target);\n  // };\n  // const youtubeChooseTrack = (songId) => {\n  // \tconsole.log(songId);\n  // \tsetYoutubeIsPlaying(true);\n  // \tsetYoutubeCurrentIndex(songId);\n  // };\n\n  // const handlePlay = () => {\n  // \tsetYoutubeIsPlaying(true);\n  // \tplayer.playVideo();\n  // };\n\n  // const handlePause = () => {\n  // \tsetYoutubeIsPlaying(false);\n  // \tplayer.pauseVideo();\n  // };\n\n  // const handleNext = (youtubePlaylist) => {\n  // \tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n  // };\n\n  // const handlePrevious = (youtubePlaylist) => {\n  // \tsetYoutubeCurrentIndex((prevIndex) => {\n  // \t\tconst newIndex = prevIndex - 1;\n  // \t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n  // \t});\n  // };\n\n  // const handlePlaylistEnd = () => {\n  // \tsetYoutubeCurrentIndex(0);\n  // };\n\n  // const youtubePlaylists = [\n  // \t{\n  // \t\tplaylistTitle: \"Brett Emmons\",\n  // \t\tid: 0,\n  // \t\tsongs: [\n  // \t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n  // \t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n  // \t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n  // \t\t],\n  // \t},\n  // \t{\n  // \t\tplaylistTitle: \"J.Cole\",\n  // \t\tid: 1,\n  // \t\tsongs: [\n  // \t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n  // \t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n  // \t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n  // \t\t],\n  // \t},\n  // \t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n  // ];\n\n  // const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n  // const playlistAlbumCovers = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.album.images[0].url);\n  // // console.log(playlistAlbumCovers);\n  // console.log(currentTrack);\n  return null;\n  // return (\n  // \t<div className=\"dashboard\">\n  // \t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} setSpotifySelectedPlaylist={setSpotifySelectedPlaylist} />\n  // \t\t<MediaPanel accessToken={accessToken} trackUri={currentTrack?.uri} playlistUri={spotifyTrackURIs} playlistAlbumCovers={playlistAlbumCovers} isSpotifySong={isSpotifySong} />\n  // \t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} setIsSpotifySong={setIsSpotifySong} />\n\n  // \t\t{/* {youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />} */}\n\n  // \t\t{/* <div className=\"Spotify-Player\"> */}\n  // \t\t{/* <SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer> */}\n\n  // \t\t{/* </div> */}\n  // \t</div>\n  // );\n}\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["API_BASE_URL","spotifyApi","SpotifyWebApi","clientId","Dashboard","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/Dashboard.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// import useAuth from \"./components/useAuth\";\n// import SpotifyWebApi from \"spotify-web-api-node\";\n// import Tracks from \"./components/Tracks\";\n// import ControlPanel from \"./components/ControlPanel\";\n// import YoutubePlayer from \"./components/YoutubePlayer\";\n// import SpotifyPlayer from \"./components/SpotifyPlayer\";\n// import MediaPanel from \"./components/MediaPanel\";\n// import YoutubeAuth from \"./components/YoutubeAuth\";\n// import Login from \"./Login\";\n\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\nconst spotifyApi = new SpotifyWebApi({\n\tclientId: \"8b945ef10ea24755b83ac50cede405a0\",\n});\n\nexport default function Dashboard() {\n\t/**-----------------------------------------------------------------------------------------------------------------------\n\t *                                                    SPOTIFY\n\t *-----------------------------------------------------------------------------------------------------------------------**/\n\n\t// const code = new URLSearchParams(window.location.search).get(\"code\");\n\t// const accessToken = useAuth(code);\n\t// const [currentTrack, setCurrentTrack] = useState();\n\t// const [platform, setPlatform] = useState(null);\n\t// const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n\t// const [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n\t// const [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n\t// const [isSpotifySong, setIsSpotifySong] = useState(false);\n\n\t// useEffect(() => {\n\t// \tif (!accessToken) return;\n\t// \tspotifyApi.setAccessToken(accessToken);\n\t// \tfetchPlaylists();\n\t// }, [accessToken]);\n\n\t// const fetchPlaylists = async () => {\n\t// \ttry {\n\t// \t\tlet playlists = [];\n\t// \t\tlet nextUrl = `${API_BASE_URL}/me/playlists`;\n\n\t// \t\twhile (nextUrl) {\n\t// \t\t\tconst response = await fetch(nextUrl, {\n\t// \t\t\t\theaders: {\n\t// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t// \t\t\t\t},\n\t// \t\t\t});\n\n\t// \t\t\tif (response.ok) {\n\t// \t\t\t\tconst data = await response.json();\n\t// \t\t\t\tplaylists = playlists.concat(data.items);\n\t// \t\t\t\tnextUrl = data.next; // Get the URL for the next page of playlists\n\t// \t\t\t} else {\n\t// \t\t\t\tconsole.log(\"Error:\", response.status);\n\t// \t\t\t\tbreak; // Stop fetching if there's an error\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tsetSpotifyPlaylists(playlists);\n\t// \t} catch (error) {\n\t// \t\tconsole.log(\"Error:\", error);\n\t// \t}\n\t// };\n\n\t// const fetchPlaylistTracks = async (playlistId) => {\n\t// \ttry {\n\t// \t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n\t// \t\t\theaders: {\n\t// \t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t// \t\t\t},\n\t// \t\t});\n\n\t// \t\tif (response.ok) {\n\t// \t\t\tconst data = await response.json();\n\t// \t\t\tsetSpotifyPlaylistTracks(data.items);\n\t// \t\t} else {\n\t// \t\t\tconsole.log(\"Error:\", response.status);\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(\"Error:\", error);\n\t// \t}\n\t// };\n\n\t// const spotifyHandlePlaylistSelect = async (playlist) => {\n\t// \tsetSpotifySelectedPlaylist(playlist);\n\t// \tawait fetchPlaylistTracks(playlist.id);\n\t// };\n\n\t// const spotifyDeselectPlaylist = () => {\n\t// \tconsole.log(\"Deselect\");\n\t// \tsetSpotifySelectedPlaylist(null);\n\t// };\n\n\t// const spotifyChooseTrack = (track) => {\n\t// \tsetCurrentTrack(track);\n\t// };\n\n\t// /**-----------------------------------------------------------------------------------------------------------------------\n\t//  *                                                    YOUTUBE\n\t//  *-----------------------------------------------------------------------------------------------------------------------**/\n\n\t// const [player, setPlayer] = useState(null);\n\t// const [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n\t// const [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n\t// const [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n\t// const [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n\t// const fetchYoutubePlaylistTracks = async (playlistId) => {\n\t// \tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n\t// };\n\t// const youtubeHandlePlaylistSelect = async (playlist) => {\n\t// \tsetYouTubeSelectedPlaylist(playlist);\n\t// \tconsole.log(\"hello\");\n\t// \tawait fetchYoutubePlaylistTracks(playlist.id);\n\t// };\n\t// const handlePlayerReady = (event) => {\n\t// \tsetPlayer(event.target);\n\t// \t// setYoutubeCurrentIndex(0);\n\t// \tconsole.log(\"Player Ready:\", event.target);\n\t// };\n\t// const youtubeChooseTrack = (songId) => {\n\t// \tconsole.log(songId);\n\t// \tsetYoutubeIsPlaying(true);\n\t// \tsetYoutubeCurrentIndex(songId);\n\t// };\n\n\t// const handlePlay = () => {\n\t// \tsetYoutubeIsPlaying(true);\n\t// \tplayer.playVideo();\n\t// };\n\n\t// const handlePause = () => {\n\t// \tsetYoutubeIsPlaying(false);\n\t// \tplayer.pauseVideo();\n\t// };\n\n\t// const handleNext = (youtubePlaylist) => {\n\t// \tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n\t// };\n\n\t// const handlePrevious = (youtubePlaylist) => {\n\t// \tsetYoutubeCurrentIndex((prevIndex) => {\n\t// \t\tconst newIndex = prevIndex - 1;\n\t// \t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n\t// \t});\n\t// };\n\n\t// const handlePlaylistEnd = () => {\n\t// \tsetYoutubeCurrentIndex(0);\n\t// };\n\n\t// const youtubePlaylists = [\n\t// \t{\n\t// \t\tplaylistTitle: \"Brett Emmons\",\n\t// \t\tid: 0,\n\t// \t\tsongs: [\n\t// \t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n\t// \t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n\t// \t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n\t// \t\t],\n\t// \t},\n\t// \t{\n\t// \t\tplaylistTitle: \"J.Cole\",\n\t// \t\tid: 1,\n\t// \t\tsongs: [\n\t// \t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n\t// \t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n\t// \t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n\t// \t\t],\n\t// \t},\n\t// \t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n\t// ];\n\n\t// const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n\t// const playlistAlbumCovers = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.album.images[0].url);\n\t// // console.log(playlistAlbumCovers);\n\t// console.log(currentTrack);\n\treturn null;\n\t// return (\n\t// \t<div className=\"dashboard\">\n\t// \t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} setSpotifySelectedPlaylist={setSpotifySelectedPlaylist} />\n\t// \t\t<MediaPanel accessToken={accessToken} trackUri={currentTrack?.uri} playlistUri={spotifyTrackURIs} playlistAlbumCovers={playlistAlbumCovers} isSpotifySong={isSpotifySong} />\n\t// \t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} setIsSpotifySong={setIsSpotifySong} />\n\n\t// \t\t{/* {youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />} */}\n\n\t// \t\t{/* <div className=\"Spotify-Player\"> */}\n\t// \t\t{/* <SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer> */}\n\n\t// \t\t{/* </div> */}\n\t// \t</div>\n\t// );\n}\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG,4BAA4B;AACjD,MAAMC,UAAU,GAAG,IAAIC,aAAa,CAAC;EACpCC,QAAQ,EAAE;AACX,CAAC,CAAC;AAEF,eAAe,SAASC,SAASA,CAAA,EAAG;EACnC;AACD;AACA;;EAEC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAO,IAAI;EACX;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;AACD;AAACC,EAAA,GAhLuBD,SAAS;AAAA,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}