{"ast":null,"code":"// import React, { useEffect, useRef } from \"react\";\n\n// const MusicVisualizer = () => {\n// \tconst canvasRef = useRef(null);\n// \tconst animationRef = useRef(null);\n\n// \tuseEffect(() => {\n// \t\tconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\n// \t\tconst analyser = audioContext.createAnalyser();\n// \t\tanalyser.fftSize = 2048;\n\n// \t\tconst canvas = canvasRef.current;\n// \t\tconst canvasCtx = canvas.getContext(\"2d\");\n\n// \t\tconst visualize = (stream) => {\n// \t\t\tconst source = audioContext.createMediaStreamSource(stream);\n// \t\t\tsource.connect(analyser);\n\n// \t\t\tconst renderFrame = () => {\n// \t\t\t\tconst bufferLength = analyser.frequencyBinCount;\n// \t\t\t\tconst dataArray = new Uint8Array(bufferLength);\n// \t\t\t\tanalyser.getByteFrequencyData(dataArray);\n\n// \t\t\t\tcanvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n// \t\t\t\tconst barWidth = (canvas.width / bufferLength) * 2;\n// \t\t\t\tlet x = 0;\n// \t\t\t\tfor (let i = 0; i < bufferLength; i++) {\n// \t\t\t\t\tconst barHeight = (dataArray[i] / 255) * canvas.height;\n// \t\t\t\t\tconst hue = (i / bufferLength) * 360;\n// \t\t\t\t\tcanvasCtx.fillStyle = `hsl(${hue}, 100%, 50%)`;\n// \t\t\t\t\tcanvasCtx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n// \t\t\t\t\tx += barWidth + 1;\n// \t\t\t\t}\n\n// \t\t\t\tanimationRef.current = requestAnimationFrame(renderFrame);\n// \t\t\t};\n\n// \t\t\trenderFrame();\n// \t\t};\n\n// \t\tnavigator.mediaDevices\n// \t\t\t.getUserMedia({ audio: true })\n// \t\t\t.then(visualize)\n// \t\t\t.catch((error) => {\n// \t\t\t\tconsole.error(\"Error accessing microphone:\", error);\n// \t\t\t});\n\n// \t\treturn () => {\n// \t\t\tcancelAnimationFrame(animationRef.current);\n// \t\t};\n// \t}, []);\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<canvas ref={canvasRef} width={800} height={400} style={{ border: \"1px solid white\" }} />\n// \t\t</div>\n// \t);\n// };\n\n// export default MusicVisualizer;","map":{"version":3,"names":[],"sources":["C:/Users/chris/Desktop/spotify-clone-main/client/src/components/MusicVisualizer.jsx"],"sourcesContent":["// import React, { useEffect, useRef } from \"react\";\r\n\r\n// const MusicVisualizer = () => {\r\n// \tconst canvasRef = useRef(null);\r\n// \tconst animationRef = useRef(null);\r\n\r\n// \tuseEffect(() => {\r\n// \t\tconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n// \t\tconst analyser = audioContext.createAnalyser();\r\n// \t\tanalyser.fftSize = 2048;\r\n\r\n// \t\tconst canvas = canvasRef.current;\r\n// \t\tconst canvasCtx = canvas.getContext(\"2d\");\r\n\r\n// \t\tconst visualize = (stream) => {\r\n// \t\t\tconst source = audioContext.createMediaStreamSource(stream);\r\n// \t\t\tsource.connect(analyser);\r\n\r\n// \t\t\tconst renderFrame = () => {\r\n// \t\t\t\tconst bufferLength = analyser.frequencyBinCount;\r\n// \t\t\t\tconst dataArray = new Uint8Array(bufferLength);\r\n// \t\t\t\tanalyser.getByteFrequencyData(dataArray);\r\n\r\n// \t\t\t\tcanvasCtx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n// \t\t\t\tconst barWidth = (canvas.width / bufferLength) * 2;\r\n// \t\t\t\tlet x = 0;\r\n// \t\t\t\tfor (let i = 0; i < bufferLength; i++) {\r\n// \t\t\t\t\tconst barHeight = (dataArray[i] / 255) * canvas.height;\r\n// \t\t\t\t\tconst hue = (i / bufferLength) * 360;\r\n// \t\t\t\t\tcanvasCtx.fillStyle = `hsl(${hue}, 100%, 50%)`;\r\n// \t\t\t\t\tcanvasCtx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\r\n// \t\t\t\t\tx += barWidth + 1;\r\n// \t\t\t\t}\r\n\r\n// \t\t\t\tanimationRef.current = requestAnimationFrame(renderFrame);\r\n// \t\t\t};\r\n\r\n// \t\t\trenderFrame();\r\n// \t\t};\r\n\r\n// \t\tnavigator.mediaDevices\r\n// \t\t\t.getUserMedia({ audio: true })\r\n// \t\t\t.then(visualize)\r\n// \t\t\t.catch((error) => {\r\n// \t\t\t\tconsole.error(\"Error accessing microphone:\", error);\r\n// \t\t\t});\r\n\r\n// \t\treturn () => {\r\n// \t\t\tcancelAnimationFrame(animationRef.current);\r\n// \t\t};\r\n// \t}, []);\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t<canvas ref={canvasRef} width={800} height={400} style={{ border: \"1px solid white\" }} />\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default MusicVisualizer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}