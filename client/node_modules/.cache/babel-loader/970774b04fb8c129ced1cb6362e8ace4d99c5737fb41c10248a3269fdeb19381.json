{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\Player.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  accessToken,\n  currentTrack,\n  playlistUri,\n  setCurrentTrack\n}) {\n  _s();\n  const [play, setPlay] = useState(false);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0); // Add state for the current song index\n  // const [currentSongCover, setCurrentSongCover] = useState(trackUri); // Add state for the current\n  useEffect(() => {\n    setPlay(true);\n    const newIndex = playlistUri.findIndex(uri => uri === currentTrack.uri);\n    setCurrentSongIndex(newIndex);\n    // setCurrentTrack(track);\n    console.log(newIndex); // Find the new index based on the provided trackUri\n  }, [currentTrack.uri]);\n\n  // const handleSongChange = (track) => {\n  // \tsetCurrentTrack(track);\n  // \t// setCurrentSongCover(cover);\n  // };\n  console.log(currentTrack.uri);\n  // activeColor: string;\n  //   altColor: string;\n  //   bgColor: string;\n  //   color: string;\n  //   errorColor: string;\n  //   height: number;\n  //   loaderColor: string;\n  //   loaderSize: number | string;\n  //   sliderColor: string;\n  //   sliderHandleBorderRadius: number | string;\n  //   sliderHandleColor: string;\n  //   sliderHeight: number;\n  //   sliderTrackBorderRadius: number | string;\n  //   sliderTrackColor: string;\n  //   trackArtistColor: string;\n  //   trackNameColor: string;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n      styles: {\n        loaderSize: 90,\n        height: 60,\n        activeColor: \"#202528\",\n        bgColor: \"#202528\",\n        color: \"#fff\",\n        loaderColor: \"#0011ff\",\n        sliderColor: \"#0011ff\",\n        trackArtistColor: \"#ccc\",\n        trackNameColor: \"#fff\",\n        sliderHandleColor: \"#ffffff\",\n        sliderHeight: 10,\n        sliderTrackColor: \"#191919\",\n        sliderTrackBorderRadius: 100,\n        sliderHandleBorderRadius: 10\n      },\n      token: accessToken\n      // showSaveIcon\n      ,\n      callback: state => {\n        if (!state.isPlaying) setPlay(false);\n        const currentSongIndex = playlistUri.findIndex(uri => {\n          var _state$track;\n          return uri === ((_state$track = state.track) === null || _state$track === void 0 ? void 0 : _state$track.uri);\n        });\n        handleSongChange(state.track);\n        // console.log(currentSongIndex);\n        console.log(state.track);\n      }\n      // magnifySliderOnHover={true}\n      ,\n      offset: currentSongIndex\n      // shuffle={true}\n      ,\n      play: play,\n      uris: playlistUri\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n}\n_s(Player, \"QnDcUXx7miBGxZFvQq/qFC7Jh3c=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useState","useEffect","SpotifyPlayer","jsxDEV","_jsxDEV","Fragment","_Fragment","Player","accessToken","currentTrack","playlistUri","setCurrentTrack","_s","play","setPlay","currentSongIndex","setCurrentSongIndex","newIndex","findIndex","uri","console","log","children","styles","loaderSize","height","activeColor","bgColor","color","loaderColor","sliderColor","trackArtistColor","trackNameColor","sliderHandleColor","sliderHeight","sliderTrackColor","sliderTrackBorderRadius","sliderHandleBorderRadius","token","callback","state","isPlaying","_state$track","track","handleSongChange","offset","uris","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/Player.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\nexport default function Player({ accessToken, currentTrack, playlistUri, setCurrentTrack }) {\n\tconst [play, setPlay] = useState(false);\n\tconst [currentSongIndex, setCurrentSongIndex] = useState(0); // Add state for the current song index\n\t// const [currentSongCover, setCurrentSongCover] = useState(trackUri); // Add state for the current\n\tuseEffect(() => {\n\t\tsetPlay(true);\n\t\tconst newIndex = playlistUri.findIndex((uri) => uri === currentTrack.uri);\n\t\tsetCurrentSongIndex(newIndex);\n\t\t// setCurrentTrack(track);\n\t\tconsole.log(newIndex); // Find the new index based on the provided trackUri\n\t}, [currentTrack.uri]);\n\n\t// const handleSongChange = (track) => {\n\t// \tsetCurrentTrack(track);\n\t// \t// setCurrentSongCover(cover);\n\t// };\n\tconsole.log(currentTrack.uri);\n\t// activeColor: string;\n\t//   altColor: string;\n\t//   bgColor: string;\n\t//   color: string;\n\t//   errorColor: string;\n\t//   height: number;\n\t//   loaderColor: string;\n\t//   loaderSize: number | string;\n\t//   sliderColor: string;\n\t//   sliderHandleBorderRadius: number | string;\n\t//   sliderHandleColor: string;\n\t//   sliderHeight: number;\n\t//   sliderTrackBorderRadius: number | string;\n\t//   sliderTrackColor: string;\n\t//   trackArtistColor: string;\n\t//   trackNameColor: string;\n\treturn (\n\t\t<>\n\t\t\t{/* {currentSongCover && <img src={currentSongCover} alt=\"Current Track\" />} */}\n\t\t\t<SpotifyPlayer\n\t\t\t\tstyles={{\n\t\t\t\t\tloaderSize: 90,\n\t\t\t\t\theight: 60,\n\t\t\t\t\tactiveColor: \"#202528\",\n\t\t\t\t\tbgColor: \"#202528\",\n\t\t\t\t\tcolor: \"#fff\",\n\t\t\t\t\tloaderColor: \"#0011ff\",\n\t\t\t\t\tsliderColor: \"#0011ff\",\n\t\t\t\t\ttrackArtistColor: \"#ccc\",\n\t\t\t\t\ttrackNameColor: \"#fff\",\n\t\t\t\t\tsliderHandleColor: \"#ffffff\",\n\t\t\t\t\tsliderHeight: 10,\n\t\t\t\t\tsliderTrackColor: \"#191919\",\n\t\t\t\t\tsliderTrackBorderRadius: 100,\n\t\t\t\t\tsliderHandleBorderRadius: 10,\n\t\t\t\t}}\n\t\t\t\ttoken={accessToken}\n\t\t\t\t// showSaveIcon\n\t\t\t\tcallback={(state) => {\n\t\t\t\t\tif (!state.isPlaying) setPlay(false);\n\t\t\t\t\tconst currentSongIndex = playlistUri.findIndex((uri) => uri === state.track?.uri);\n\t\t\t\t\thandleSongChange(state.track);\n\t\t\t\t\t// console.log(currentSongIndex);\n\t\t\t\t\tconsole.log(state.track);\n\t\t\t\t}}\n\t\t\t\t// magnifySliderOnHover={true}\n\t\t\t\toffset={currentSongIndex}\n\t\t\t\t// shuffle={true}\n\t\t\t\tplay={play}\n\t\t\t\turis={playlistUri}\n\t\t\t/>\n\t\t</>\n\t);\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvD,eAAe,SAASC,MAAMA,CAAC;EAAEC,WAAW;EAAEC,YAAY;EAAEC,WAAW;EAAEC;AAAgB,CAAC,EAAE;EAAAC,EAAA;EAC3F,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACe,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7D;EACAC,SAAS,CAAC,MAAM;IACfa,OAAO,CAAC,IAAI,CAAC;IACb,MAAMG,QAAQ,GAAGP,WAAW,CAACQ,SAAS,CAAEC,GAAG,IAAKA,GAAG,KAAKV,YAAY,CAACU,GAAG,CAAC;IACzEH,mBAAmB,CAACC,QAAQ,CAAC;IAC7B;IACAG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACR,YAAY,CAACU,GAAG,CAAC,CAAC;;EAEtB;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAACZ,YAAY,CAACU,GAAG,CAAC;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACCf,OAAA,CAAAE,SAAA;IAAAgB,QAAA,eAEClB,OAAA,CAACF,aAAa;MACbqB,MAAM,EAAE;QACPC,UAAU,EAAE,EAAE;QACdC,MAAM,EAAE,EAAE;QACVC,WAAW,EAAE,SAAS;QACtBC,OAAO,EAAE,SAAS;QAClBC,KAAK,EAAE,MAAM;QACbC,WAAW,EAAE,SAAS;QACtBC,WAAW,EAAE,SAAS;QACtBC,gBAAgB,EAAE,MAAM;QACxBC,cAAc,EAAE,MAAM;QACtBC,iBAAiB,EAAE,SAAS;QAC5BC,YAAY,EAAE,EAAE;QAChBC,gBAAgB,EAAE,SAAS;QAC3BC,uBAAuB,EAAE,GAAG;QAC5BC,wBAAwB,EAAE;MAC3B,CAAE;MACFC,KAAK,EAAE9B;MACP;MAAA;MACA+B,QAAQ,EAAGC,KAAK,IAAK;QACpB,IAAI,CAACA,KAAK,CAACC,SAAS,EAAE3B,OAAO,CAAC,KAAK,CAAC;QACpC,MAAMC,gBAAgB,GAAGL,WAAW,CAACQ,SAAS,CAAEC,GAAG;UAAA,IAAAuB,YAAA;UAAA,OAAKvB,GAAG,OAAAuB,YAAA,GAAKF,KAAK,CAACG,KAAK,cAAAD,YAAA,uBAAXA,YAAA,CAAavB,GAAG;QAAA,EAAC;QACjFyB,gBAAgB,CAACJ,KAAK,CAACG,KAAK,CAAC;QAC7B;QACAvB,OAAO,CAACC,GAAG,CAACmB,KAAK,CAACG,KAAK,CAAC;MACzB;MACA;MAAA;MACAE,MAAM,EAAE9B;MACR;MAAA;MACAF,IAAI,EAAEA,IAAK;MACXiC,IAAI,EAAEpC;IAAY;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC,gBACD,CAAC;AAEL;AAACtC,EAAA,CAtEuBL,MAAM;AAAA4C,EAAA,GAAN5C,MAAM;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}