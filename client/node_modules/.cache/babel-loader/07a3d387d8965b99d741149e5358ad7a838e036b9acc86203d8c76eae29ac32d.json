{"ast":null,"code":"// import React, { useState } from \"react\";\n// // import { google } from \"googleapis\";\n\n// const YouTubeAuth = ({ clientId, clientSecret }) => {\n// \tconst [isSignedIn, setIsSignedIn] = useState(false);\n// \tconst [playlists, setPlaylists] = useState([]);\n\n// \tconst authenticate = async () => {\n// \t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\n\n// \t\t// Redirect to Google's OAuth2 consent screen\n// \t\tconst authUrl = oauth2Client.generateAuthUrl({\n// \t\t\taccess_type: \"offline\",\n// \t\t\tscope: [\"https://www.googleapis.com/auth/youtube.readonly\"],\n// \t\t});\n\n// \t\twindow.location.href = authUrl;\n// \t};\n\n// \tconst getPlaylists = async (accessToken) => {\n// \t\tconst youtube = google.youtube(\"v3\");\n// \t\tconst res = await youtube.playlists.list({\n// \t\t\tauth: accessToken,\n// \t\t\tpart: \"snippet\",\n// \t\t\tmine: true,\n// \t\t});\n\n// \t\tsetPlaylists(res.data.items);\n// \t};\n\n// \tReact.useEffect(() => {\n// \t\t// Get the access token from the URL after successful authentication\n// \t\tconst urlParams = new URLSearchParams(window.location.search);\n// \t\tconst code = urlParams.get(\"code\");\n\n// \t\tif (code) {\n// \t\t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\n\n// \t\t\t// Get access token and refresh token\n// \t\t\toauth2Client.getToken(code, (err, token) => {\n// \t\t\t\tif (err) {\n// \t\t\t\t\tconsole.error(\"Error getting access token:\", err);\n// \t\t\t\t} else {\n// \t\t\t\t\toauth2Client.setCredentials(token);\n// \t\t\t\t\tgetPlaylists(token.access_token);\n// \t\t\t\t\tsetIsSignedIn(true);\n// \t\t\t\t}\n// \t\t\t});\n// \t\t}\n// \t}, [clientId, clientSecret]);\n\n// \treturn (\n// \t\t<div>\n// \t\t\t{!isSignedIn ? (\n// \t\t\t\t<button onClick={authenticate}>Sign In with YouTube</button>\n// \t\t\t) : (\n// \t\t\t\t<div>\n// \t\t\t\t\t<h2>My Playlists:</h2>\n// \t\t\t\t\t<ul>\n// \t\t\t\t\t\t{playlists.map((playlist) => (\n// \t\t\t\t\t\t\t<li key={playlist.id}>{playlist.snippet.title}</li>\n// \t\t\t\t\t\t))}\n// \t\t\t\t\t</ul>\n// \t\t\t\t</div>\n// \t\t\t)}\n// \t\t</div>\n// \t);\n// };\n\n// export default YouTubeAuth;","map":{"version":3,"names":[],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/YoutubeAuth.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// // import { google } from \"googleapis\";\r\n\r\n// const YouTubeAuth = ({ clientId, clientSecret }) => {\r\n// \tconst [isSignedIn, setIsSignedIn] = useState(false);\r\n// \tconst [playlists, setPlaylists] = useState([]);\r\n\r\n// \tconst authenticate = async () => {\r\n// \t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\r\n\r\n// \t\t// Redirect to Google's OAuth2 consent screen\r\n// \t\tconst authUrl = oauth2Client.generateAuthUrl({\r\n// \t\t\taccess_type: \"offline\",\r\n// \t\t\tscope: [\"https://www.googleapis.com/auth/youtube.readonly\"],\r\n// \t\t});\r\n\r\n// \t\twindow.location.href = authUrl;\r\n// \t};\r\n\r\n// \tconst getPlaylists = async (accessToken) => {\r\n// \t\tconst youtube = google.youtube(\"v3\");\r\n// \t\tconst res = await youtube.playlists.list({\r\n// \t\t\tauth: accessToken,\r\n// \t\t\tpart: \"snippet\",\r\n// \t\t\tmine: true,\r\n// \t\t});\r\n\r\n// \t\tsetPlaylists(res.data.items);\r\n// \t};\r\n\r\n// \tReact.useEffect(() => {\r\n// \t\t// Get the access token from the URL after successful authentication\r\n// \t\tconst urlParams = new URLSearchParams(window.location.search);\r\n// \t\tconst code = urlParams.get(\"code\");\r\n\r\n// \t\tif (code) {\r\n// \t\t\tconst oauth2Client = new google.auth.OAuth2(clientId, clientSecret);\r\n\r\n// \t\t\t// Get access token and refresh token\r\n// \t\t\toauth2Client.getToken(code, (err, token) => {\r\n// \t\t\t\tif (err) {\r\n// \t\t\t\t\tconsole.error(\"Error getting access token:\", err);\r\n// \t\t\t\t} else {\r\n// \t\t\t\t\toauth2Client.setCredentials(token);\r\n// \t\t\t\t\tgetPlaylists(token.access_token);\r\n// \t\t\t\t\tsetIsSignedIn(true);\r\n// \t\t\t\t}\r\n// \t\t\t});\r\n// \t\t}\r\n// \t}, [clientId, clientSecret]);\r\n\r\n// \treturn (\r\n// \t\t<div>\r\n// \t\t\t{!isSignedIn ? (\r\n// \t\t\t\t<button onClick={authenticate}>Sign In with YouTube</button>\r\n// \t\t\t) : (\r\n// \t\t\t\t<div>\r\n// \t\t\t\t\t<h2>My Playlists:</h2>\r\n// \t\t\t\t\t<ul>\r\n// \t\t\t\t\t\t{playlists.map((playlist) => (\r\n// \t\t\t\t\t\t\t<li key={playlist.id}>{playlist.snippet.title}</li>\r\n// \t\t\t\t\t\t))}\r\n// \t\t\t\t\t</ul>\r\n// \t\t\t\t</div>\r\n// \t\t\t)}\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default YouTubeAuth;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}