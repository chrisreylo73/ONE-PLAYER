{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n\n// import useAuth from \"./components/useAuth\";\n// import Player from \"./components/Player\";\n// import SpotifyWebApi from \"spotify-web-api-node\";\n// import Tracks from \"./components/Tracks\";\n// import ControlPanel from \"./components/ControlPanel\";\n// import YoutubePlayer from \"./components/YoutubePlayer\";\n// import SpotifyPlayer from \"./components/SpotifyPlayer\";\n// import MediaPanel from \"./components/MediaPanel\";\n\n// const API_BASE_URL = \"https://api.spotify.com/v1\";\n// const spotifyApi = new SpotifyWebApi({\n// \tclientId: \"8b945ef10ea24755b83ac50cede405a0\",\n// });\n\n// export default function Dashboard({ code }) {\n// \t/**-----------------------------------------------------------------------------------------------------------------------\n// \t *                                                    SPOTIFY\n// \t *-----------------------------------------------------------------------------------------------------------------------**/\n// \tconst accessToken = useAuth(code);\n// \tconst [currentTrack, setCurrentTrack] = useState();\n// \tconst [platform, setPlatform] = useState(null);\n// \tconst [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n// \tconst [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n// \tconst [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n\n// \tuseEffect(() => {\n// \t\tif (!accessToken) return;\n// \t\tspotifyApi.setAccessToken(accessToken);\n// \t\tfetchPlaylists();\n// \t}, [accessToken]);\n\n// \tconst fetchPlaylists = async () => {\n// \t\ttry {\n// \t\t\tconst response = await fetch(`${API_BASE_URL}/me/playlists`, {\n// \t\t\t\theaders: {\n// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n// \t\t\t\t},\n// \t\t\t});\n\n// \t\t\tif (response.ok) {\n// \t\t\t\tconst data = await response.json();\n// \t\t\t\tsetSpotifyPlaylists(data.items);\n// \t\t\t} else {\n// \t\t\t\tconsole.log(\"Error:\", response.status);\n// \t\t\t}\n// \t\t} catch (error) {\n// \t\t\tconsole.log(\"Error:\", error);\n// \t\t}\n// \t};\n\n// \tconst fetchPlaylistTracks = async (playlistId) => {\n// \t\ttry {\n// \t\t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n// \t\t\t\theaders: {\n// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n// \t\t\t\t},\n// \t\t\t});\n\n// \t\t\tif (response.ok) {\n// \t\t\t\tconst data = await response.json();\n// \t\t\t\tsetSpotifyPlaylistTracks(data.items);\n// \t\t\t} else {\n// \t\t\t\tconsole.log(\"Error:\", response.status);\n// \t\t\t}\n// \t\t} catch (error) {\n// \t\t\tconsole.log(\"Error:\", error);\n// \t\t}\n// \t};\n// \tconst fetchYoutubePlaylistTracks = async (playlistId) => {\n// \t\tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n// \t};\n\n// \tconst spotifyHandlePlaylistSelect = async (playlist) => {\n// \t\tsetSpotifySelectedPlaylist(playlist);\n// \t\tconsole.log(\"HI\");\n// \t\tawait fetchPlaylistTracks(playlist.id);\n// \t};\n\n// \tconst youtubeHandlePlaylistSelect = async (playlist) => {\n// \t\tsetYouTubeSelectedPlaylist(playlist);\n// \t\tconsole.log(\"hello\");\n// \t\tawait fetchYoutubePlaylistTracks(playlist.id);\n// \t};\n// \tconst spotifyDeselectPlaylist = () => {};\n\n// \tconst spotifyChooseTrack = (track) => {\n// \t\tsetCurrentTrack(track);\n// \t\t// setSearch(\"\");\n// \t\t// setLyrics(\"\");\n// \t};\n\n// \t/**-----------------------------------------------------------------------------------------------------------------------\n// \t *                                                    YOUTUBE\n// \t *-----------------------------------------------------------------------------------------------------------------------**/\n// \tconst [player, setPlayer] = useState(null);\n// \tconst [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n// \tconst [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n// \tconst [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n// \tconst [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n// \tconst handlePlayerReady = (event) => {\n// \t\tsetPlayer(event.target);\n// \t\t// setYoutubeCurrentIndex(0);\n// \t\tconsole.log(\"Player Ready:\", event.target);\n// \t};\n// \tconst youtubeChooseTrack = (songId) => {\n// \t\tconsole.log(songId);\n// \t\tsetYoutubeIsPlaying(true);\n// \t\tsetYoutubeCurrentIndex(songId);\n// \t};\n\n// \tconst handlePlay = () => {\n// \t\tsetYoutubeIsPlaying(true);\n// \t\tplayer.playVideo();\n// \t};\n\n// \tconst handlePause = () => {\n// \t\tsetYoutubeIsPlaying(false);\n// \t\tplayer.pauseVideo();\n// \t};\n\n// \tconst handleNext = (youtubePlaylist) => {\n// \t\tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n// \t};\n\n// \tconst handlePrevious = (youtubePlaylist) => {\n// \t\tsetYoutubeCurrentIndex((prevIndex) => {\n// \t\t\tconst newIndex = prevIndex - 1;\n// \t\t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n// \t\t});\n// \t};\n\n// \tconst handlePlaylistEnd = () => {\n// \t\tsetYoutubeCurrentIndex(0);\n// \t};\n\n// \tconst youtubePlaylists = [\n// \t\t{\n// \t\t\tplaylistTitle: \"Brett Emmons\",\n// \t\t\tid: 0,\n// \t\t\tsongs: [\n// \t\t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n// \t\t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n// \t\t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n// \t\t\t],\n// \t\t},\n// \t\t{\n// \t\t\tplaylistTitle: \"J.Cole\",\n// \t\t\tid: 1,\n// \t\t\tsongs: [\n// \t\t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n// \t\t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n// \t\t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n// \t\t\t],\n// \t\t},\n// \t\t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n// \t];\n\n// \t// const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n// \t// console.log(spotifyTrackURIs);\n\n// \treturn (\n// \t\t<div className=\"dashboard\">\n// \t\t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} />\n// \t\t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} />\n// \t\t\t{youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />}\n// \t\t\t{/* <MediaPanel /> */}\n// \t\t\t<div className=\"Spotify-Player\">\n// \t\t\t\t<SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer>\n// \t\t\t\t{/* <Player accessToken={accessToken} trackUri={currentTrack?.uri} spotifyTrackURIs={spotifyTrackURIs} /> */}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }","map":{"version":3,"names":[],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/Dashboard.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n\n// import useAuth from \"./components/useAuth\";\n// import Player from \"./components/Player\";\n// import SpotifyWebApi from \"spotify-web-api-node\";\n// import Tracks from \"./components/Tracks\";\n// import ControlPanel from \"./components/ControlPanel\";\n// import YoutubePlayer from \"./components/YoutubePlayer\";\n// import SpotifyPlayer from \"./components/SpotifyPlayer\";\n// import MediaPanel from \"./components/MediaPanel\";\n\n// const API_BASE_URL = \"https://api.spotify.com/v1\";\n// const spotifyApi = new SpotifyWebApi({\n// \tclientId: \"8b945ef10ea24755b83ac50cede405a0\",\n// });\n\n// export default function Dashboard({ code }) {\n// \t/**-----------------------------------------------------------------------------------------------------------------------\n// \t *                                                    SPOTIFY\n// \t *-----------------------------------------------------------------------------------------------------------------------**/\n// \tconst accessToken = useAuth(code);\n// \tconst [currentTrack, setCurrentTrack] = useState();\n// \tconst [platform, setPlatform] = useState(null);\n// \tconst [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n// \tconst [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n// \tconst [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n\n// \tuseEffect(() => {\n// \t\tif (!accessToken) return;\n// \t\tspotifyApi.setAccessToken(accessToken);\n// \t\tfetchPlaylists();\n// \t}, [accessToken]);\n\n// \tconst fetchPlaylists = async () => {\n// \t\ttry {\n// \t\t\tconst response = await fetch(`${API_BASE_URL}/me/playlists`, {\n// \t\t\t\theaders: {\n// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n// \t\t\t\t},\n// \t\t\t});\n\n// \t\t\tif (response.ok) {\n// \t\t\t\tconst data = await response.json();\n// \t\t\t\tsetSpotifyPlaylists(data.items);\n// \t\t\t} else {\n// \t\t\t\tconsole.log(\"Error:\", response.status);\n// \t\t\t}\n// \t\t} catch (error) {\n// \t\t\tconsole.log(\"Error:\", error);\n// \t\t}\n// \t};\n\n// \tconst fetchPlaylistTracks = async (playlistId) => {\n// \t\ttry {\n// \t\t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n// \t\t\t\theaders: {\n// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n// \t\t\t\t},\n// \t\t\t});\n\n// \t\t\tif (response.ok) {\n// \t\t\t\tconst data = await response.json();\n// \t\t\t\tsetSpotifyPlaylistTracks(data.items);\n// \t\t\t} else {\n// \t\t\t\tconsole.log(\"Error:\", response.status);\n// \t\t\t}\n// \t\t} catch (error) {\n// \t\t\tconsole.log(\"Error:\", error);\n// \t\t}\n// \t};\n// \tconst fetchYoutubePlaylistTracks = async (playlistId) => {\n// \t\tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n// \t};\n\n// \tconst spotifyHandlePlaylistSelect = async (playlist) => {\n// \t\tsetSpotifySelectedPlaylist(playlist);\n// \t\tconsole.log(\"HI\");\n// \t\tawait fetchPlaylistTracks(playlist.id);\n// \t};\n\n// \tconst youtubeHandlePlaylistSelect = async (playlist) => {\n// \t\tsetYouTubeSelectedPlaylist(playlist);\n// \t\tconsole.log(\"hello\");\n// \t\tawait fetchYoutubePlaylistTracks(playlist.id);\n// \t};\n// \tconst spotifyDeselectPlaylist = () => {};\n\n// \tconst spotifyChooseTrack = (track) => {\n// \t\tsetCurrentTrack(track);\n// \t\t// setSearch(\"\");\n// \t\t// setLyrics(\"\");\n// \t};\n\n// \t/**-----------------------------------------------------------------------------------------------------------------------\n// \t *                                                    YOUTUBE\n// \t *-----------------------------------------------------------------------------------------------------------------------**/\n// \tconst [player, setPlayer] = useState(null);\n// \tconst [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n// \tconst [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n// \tconst [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n// \tconst [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n// \tconst handlePlayerReady = (event) => {\n// \t\tsetPlayer(event.target);\n// \t\t// setYoutubeCurrentIndex(0);\n// \t\tconsole.log(\"Player Ready:\", event.target);\n// \t};\n// \tconst youtubeChooseTrack = (songId) => {\n// \t\tconsole.log(songId);\n// \t\tsetYoutubeIsPlaying(true);\n// \t\tsetYoutubeCurrentIndex(songId);\n// \t};\n\n// \tconst handlePlay = () => {\n// \t\tsetYoutubeIsPlaying(true);\n// \t\tplayer.playVideo();\n// \t};\n\n// \tconst handlePause = () => {\n// \t\tsetYoutubeIsPlaying(false);\n// \t\tplayer.pauseVideo();\n// \t};\n\n// \tconst handleNext = (youtubePlaylist) => {\n// \t\tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n// \t};\n\n// \tconst handlePrevious = (youtubePlaylist) => {\n// \t\tsetYoutubeCurrentIndex((prevIndex) => {\n// \t\t\tconst newIndex = prevIndex - 1;\n// \t\t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n// \t\t});\n// \t};\n\n// \tconst handlePlaylistEnd = () => {\n// \t\tsetYoutubeCurrentIndex(0);\n// \t};\n\n// \tconst youtubePlaylists = [\n// \t\t{\n// \t\t\tplaylistTitle: \"Brett Emmons\",\n// \t\t\tid: 0,\n// \t\t\tsongs: [\n// \t\t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n// \t\t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n// \t\t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n// \t\t\t],\n// \t\t},\n// \t\t{\n// \t\t\tplaylistTitle: \"J.Cole\",\n// \t\t\tid: 1,\n// \t\t\tsongs: [\n// \t\t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n// \t\t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n// \t\t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n// \t\t\t],\n// \t\t},\n// \t\t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n// \t];\n\n// \t// const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n// \t// console.log(spotifyTrackURIs);\n\n// \treturn (\n// \t\t<div className=\"dashboard\">\n// \t\t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} />\n// \t\t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} />\n// \t\t\t{youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />}\n// \t\t\t{/* <MediaPanel /> */}\n// \t\t\t<div className=\"Spotify-Player\">\n// \t\t\t\t<SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer>\n// \t\t\t\t{/* <Player accessToken={accessToken} trackUri={currentTrack?.uri} spotifyTrackURIs={spotifyTrackURIs} /> */}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// }\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}