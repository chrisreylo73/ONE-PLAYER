{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nconst SpotifyPlayer = ({\n  accessToken,\n  currentTrack\n}) => {\n  window.onSpotifyWebPlaybackSDKReady = () => {\n    const token = \"[My Spotify Web API access token]\";\n    const player = new Spotify.Player({\n      name: \"Web Playback SDK Quick Start Player\",\n      getOAuthToken: cb => {\n        cb(token);\n      }\n    });\n  };\n  // const [player, setPlayer] = useState(null);\n  // const [isPaused, setPaused] = useState(false);\n  // useEffect(() => {\n  // \tconst script = document.createElement(\"script\");\n  // \tscript.src = \"https://sdk.scdn.co/spotify-player.js\";\n  // \tscript.async = true;\n  // \tdocument.body.appendChild(script);\n  // \twindow.onSpotifyWebPlaybackSDKReady = () => {\n  // \t\tconst newPlayer = new window.Spotify.Player({\n  // \t\t\tname: \"React Spotify Player\",\n  // \t\t\tgetOAuthToken: (cb) => {\n  // \t\t\t\tcb(accessToken);\n  // \t\t\t},\n  // \t\t});\n  // \t\tsetPlayer(newPlayer);\n  // \t\tnewPlayer.connect().then((success) => {\n  // \t\t\tif (success) {\n  // \t\t\t\tconsole.log(\"Connected to Spotify player!\");\n  // \t\t\t}\n  // \t\t});\n  // \t};\n  // \treturn () => {\n  // \t\tif (player !== null) {\n  // \t\t\tplayer.disconnect();\n  // \t\t}\n  // \t};\n  // }, [accessToken]);\n  // useEffect(() => {\n  // \tif (currentTrack?.uri) {\n  // \t\tplayer.resume();\n  // \t\tplayer.addListener(\"ready\", ({ device_id }) => {\n  // \t\t\tplayer._options.id = device_id;\n  // \t\t\tplayer._options.getOAuthToken((access_token) => {\n  // \t\t\t\tfetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\n  // \t\t\t\t\tmethod: \"PUT\",\n  // \t\t\t\t\tbody: JSON.stringify({ uris: [currentTrack?.uri] }),\n  // \t\t\t\t\theaders: {\n  // \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n  // \t\t\t\t\t\tAuthorization: `Bearer ${access_token}`,\n  // \t\t\t\t\t},\n  // \t\t\t\t});\n  // \t\t\t});\n  // \t\t});\n  // \t}\n  // }, [currentTrack.uri]);\n  // const handlePreviousTrack = () => {\n  // \tif (player !== null) {\n  // \t\tplayer.previousTrack();\n  // \t}\n  // };\n  // const handleTogglePlay = () => {\n  // \tif (player !== null) {\n  // \t\tplayer.togglePlay();\n  // \t\tsetPaused(!isPaused);\n  // \t}\n  // };\n  // const handleNextTrack = () => {\n  // \tif (player !== null) {\n  // \t\tplayer.nextTrack();\n  // \t}\n  // };\n  // if (currentTrack != null) {\n  // \treturn (\n  // \t\t<div id=\"spotify-player\">\n  // \t\t\t<div className=\"main-wrapper\">\n  // \t\t\t\t<img src={currentTrack.album.images[0].url} className=\"now-playing__cover\" alt=\"\" />\n  // \t\t\t\t<div className=\"now-playing__side\">\n  // \t\t\t\t\t<div className=\"now-playing__name\">{currentTrack.name}</div>\n  // \t\t\t\t\t<div className=\"now-playing__artist\">{currentTrack.artists[0].name}</div>\n  // \t\t\t\t\t<button className=\"btn-spotify\" onClick={handlePreviousTrack}>\n  // \t\t\t\t\t\t&lt;&lt;\n  // \t\t\t\t\t</button>\n  // \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleTogglePlay}>\n  // \t\t\t\t\t\t{isPaused ? \"PLAY\" : \"PAUSE\"}\n  // \t\t\t\t\t</button>\n  // \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleNextTrack}>\n  // \t\t\t\t\t\t&gt;&gt;\n  // \t\t\t\t\t</button>\n  // \t\t\t\t</div>\n  // \t\t\t</div>\n  // \t\t</div>\n  // \t);\n  // } else {\n  // \treturn null;\n  // }\n};\n_c = SpotifyPlayer;\nexport default SpotifyPlayer;\nvar _c;\n$RefreshReg$(_c, \"SpotifyPlayer\");","map":{"version":3,"names":["React","useEffect","useState","SpotifyPlayer","accessToken","currentTrack","window","onSpotifyWebPlaybackSDKReady","token","player","Spotify","Player","name","getOAuthToken","cb","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/SpotifyPlayer.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst SpotifyPlayer = ({ accessToken, currentTrack }) => {\r\n\twindow.onSpotifyWebPlaybackSDKReady = () => {\r\n\t\tconst token = \"[My Spotify Web API access token]\";\r\n\t\tconst player = new Spotify.Player({\r\n\t\t\tname: \"Web Playback SDK Quick Start Player\",\r\n\t\t\tgetOAuthToken: (cb) => {\r\n\t\t\t\tcb(token);\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\t// const [player, setPlayer] = useState(null);\r\n\t// const [isPaused, setPaused] = useState(false);\r\n\t// useEffect(() => {\r\n\t// \tconst script = document.createElement(\"script\");\r\n\t// \tscript.src = \"https://sdk.scdn.co/spotify-player.js\";\r\n\t// \tscript.async = true;\r\n\t// \tdocument.body.appendChild(script);\r\n\t// \twindow.onSpotifyWebPlaybackSDKReady = () => {\r\n\t// \t\tconst newPlayer = new window.Spotify.Player({\r\n\t// \t\t\tname: \"React Spotify Player\",\r\n\t// \t\t\tgetOAuthToken: (cb) => {\r\n\t// \t\t\t\tcb(accessToken);\r\n\t// \t\t\t},\r\n\t// \t\t});\r\n\t// \t\tsetPlayer(newPlayer);\r\n\t// \t\tnewPlayer.connect().then((success) => {\r\n\t// \t\t\tif (success) {\r\n\t// \t\t\t\tconsole.log(\"Connected to Spotify player!\");\r\n\t// \t\t\t}\r\n\t// \t\t});\r\n\t// \t};\r\n\t// \treturn () => {\r\n\t// \t\tif (player !== null) {\r\n\t// \t\t\tplayer.disconnect();\r\n\t// \t\t}\r\n\t// \t};\r\n\t// }, [accessToken]);\r\n\t// useEffect(() => {\r\n\t// \tif (currentTrack?.uri) {\r\n\t// \t\tplayer.resume();\r\n\t// \t\tplayer.addListener(\"ready\", ({ device_id }) => {\r\n\t// \t\t\tplayer._options.id = device_id;\r\n\t// \t\t\tplayer._options.getOAuthToken((access_token) => {\r\n\t// \t\t\t\tfetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\r\n\t// \t\t\t\t\tmethod: \"PUT\",\r\n\t// \t\t\t\t\tbody: JSON.stringify({ uris: [currentTrack?.uri] }),\r\n\t// \t\t\t\t\theaders: {\r\n\t// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t// \t\t\t\t\t\tAuthorization: `Bearer ${access_token}`,\r\n\t// \t\t\t\t\t},\r\n\t// \t\t\t\t});\r\n\t// \t\t\t});\r\n\t// \t\t});\r\n\t// \t}\r\n\t// }, [currentTrack.uri]);\r\n\t// const handlePreviousTrack = () => {\r\n\t// \tif (player !== null) {\r\n\t// \t\tplayer.previousTrack();\r\n\t// \t}\r\n\t// };\r\n\t// const handleTogglePlay = () => {\r\n\t// \tif (player !== null) {\r\n\t// \t\tplayer.togglePlay();\r\n\t// \t\tsetPaused(!isPaused);\r\n\t// \t}\r\n\t// };\r\n\t// const handleNextTrack = () => {\r\n\t// \tif (player !== null) {\r\n\t// \t\tplayer.nextTrack();\r\n\t// \t}\r\n\t// };\r\n\t// if (currentTrack != null) {\r\n\t// \treturn (\r\n\t// \t\t<div id=\"spotify-player\">\r\n\t// \t\t\t<div className=\"main-wrapper\">\r\n\t// \t\t\t\t<img src={currentTrack.album.images[0].url} className=\"now-playing__cover\" alt=\"\" />\r\n\t// \t\t\t\t<div className=\"now-playing__side\">\r\n\t// \t\t\t\t\t<div className=\"now-playing__name\">{currentTrack.name}</div>\r\n\t// \t\t\t\t\t<div className=\"now-playing__artist\">{currentTrack.artists[0].name}</div>\r\n\t// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handlePreviousTrack}>\r\n\t// \t\t\t\t\t\t&lt;&lt;\r\n\t// \t\t\t\t\t</button>\r\n\t// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleTogglePlay}>\r\n\t// \t\t\t\t\t\t{isPaused ? \"PLAY\" : \"PAUSE\"}\r\n\t// \t\t\t\t\t</button>\r\n\t// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleNextTrack}>\r\n\t// \t\t\t\t\t\t&gt;&gt;\r\n\t// \t\t\t\t\t</button>\r\n\t// \t\t\t\t</div>\r\n\t// \t\t\t</div>\r\n\t// \t\t</div>\r\n\t// \t);\r\n\t// } else {\r\n\t// \treturn null;\r\n\t// }\r\n};\r\n\r\nexport default SpotifyPlayer;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAa,CAAC,KAAK;EACxDC,MAAM,CAACC,4BAA4B,GAAG,MAAM;IAC3C,MAAMC,KAAK,GAAG,mCAAmC;IACjD,MAAMC,MAAM,GAAG,IAAIC,OAAO,CAACC,MAAM,CAAC;MACjCC,IAAI,EAAE,qCAAqC;MAC3CC,aAAa,EAAGC,EAAE,IAAK;QACtBA,EAAE,CAACN,KAAK,CAAC;MACV;IACD,CAAC,CAAC;EACH,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACD,CAAC;AAACO,EAAA,GA/FIZ,aAAa;AAiGnB,eAAeA,aAAa;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}