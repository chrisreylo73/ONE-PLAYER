{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\Dashboard.js\";\nimport { useState, useEffect } from \"react\";\nimport useAuth from \"./components/useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Tracks from \"./components/Tracks\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport YoutubePlayer from \"./components/YoutubePlayer\";\nimport SpotifyPlayer from \"./components/SpotifyPlayer\";\nimport MediaPanel from \"./components/MediaPanel\";\nimport YoutubeAuth from \"./components/YoutubeAuth\";\nimport Login from \"./Login\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"8b945ef10ea24755b83ac50cede405a0\"\n});\nexport default function Dashboard() {\n  var _currentTrack;\n  /**-----------------------------------------------------------------------------------------------------------------------\n   *                                                    SPOTIFY\n   *-----------------------------------------------------------------------------------------------------------------------**/\n\n  // const code = new URLSearchParams(window.location.search).get(\"code\");\n  // const accessToken = useAuth(code);\n  // const [currentTrack, setCurrentTrack] = useState();\n  // const [platform, setPlatform] = useState(null);\n  // const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n  // const [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n  // const [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n  // const [isSpotifySong, setIsSpotifySong] = useState(false);\n\n  // useEffect(() => {\n  // \tif (!accessToken) return;\n  // \tspotifyApi.setAccessToken(accessToken);\n  // \tfetchPlaylists();\n  // }, [accessToken]);\n\n  // const fetchPlaylists = async () => {\n  // \ttry {\n  // \t\tlet playlists = [];\n  // \t\tlet nextUrl = `${API_BASE_URL}/me/playlists`;\n\n  // \t\twhile (nextUrl) {\n  // \t\t\tconst response = await fetch(nextUrl, {\n  // \t\t\t\theaders: {\n  // \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n  // \t\t\t\t},\n  // \t\t\t});\n\n  // \t\t\tif (response.ok) {\n  // \t\t\t\tconst data = await response.json();\n  // \t\t\t\tplaylists = playlists.concat(data.items);\n  // \t\t\t\tnextUrl = data.next; // Get the URL for the next page of playlists\n  // \t\t\t} else {\n  // \t\t\t\tconsole.log(\"Error:\", response.status);\n  // \t\t\t\tbreak; // Stop fetching if there's an error\n  // \t\t\t}\n  // \t\t}\n\n  // \t\tsetSpotifyPlaylists(playlists);\n  // \t} catch (error) {\n  // \t\tconsole.log(\"Error:\", error);\n  // \t}\n  // };\n\n  // const fetchPlaylistTracks = async (playlistId) => {\n  // \ttry {\n  // \t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n  // \t\t\theaders: {\n  // \t\t\t\tAuthorization: `Bearer ${accessToken}`,\n  // \t\t\t},\n  // \t\t});\n\n  // \t\tif (response.ok) {\n  // \t\t\tconst data = await response.json();\n  // \t\t\tsetSpotifyPlaylistTracks(data.items);\n  // \t\t} else {\n  // \t\t\tconsole.log(\"Error:\", response.status);\n  // \t\t}\n  // \t} catch (error) {\n  // \t\tconsole.log(\"Error:\", error);\n  // \t}\n  // };\n\n  // const spotifyHandlePlaylistSelect = async (playlist) => {\n  // \tsetSpotifySelectedPlaylist(playlist);\n  // \tawait fetchPlaylistTracks(playlist.id);\n  // };\n\n  // const spotifyDeselectPlaylist = () => {\n  // \tconsole.log(\"Deselect\");\n  // \tsetSpotifySelectedPlaylist(null);\n  // };\n\n  // const spotifyChooseTrack = (track) => {\n  // \tsetCurrentTrack(track);\n  // };\n\n  // /**-----------------------------------------------------------------------------------------------------------------------\n  //  *                                                    YOUTUBE\n  //  *-----------------------------------------------------------------------------------------------------------------------**/\n\n  // const [player, setPlayer] = useState(null);\n  // const [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n  // const [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n  // const [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n  // const [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n  // const fetchYoutubePlaylistTracks = async (playlistId) => {\n  // \tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n  // };\n  // const youtubeHandlePlaylistSelect = async (playlist) => {\n  // \tsetYouTubeSelectedPlaylist(playlist);\n  // \tconsole.log(\"hello\");\n  // \tawait fetchYoutubePlaylistTracks(playlist.id);\n  // };\n  // const handlePlayerReady = (event) => {\n  // \tsetPlayer(event.target);\n  // \t// setYoutubeCurrentIndex(0);\n  // \tconsole.log(\"Player Ready:\", event.target);\n  // };\n  // const youtubeChooseTrack = (songId) => {\n  // \tconsole.log(songId);\n  // \tsetYoutubeIsPlaying(true);\n  // \tsetYoutubeCurrentIndex(songId);\n  // };\n\n  // const handlePlay = () => {\n  // \tsetYoutubeIsPlaying(true);\n  // \tplayer.playVideo();\n  // };\n\n  // const handlePause = () => {\n  // \tsetYoutubeIsPlaying(false);\n  // \tplayer.pauseVideo();\n  // };\n\n  // const handleNext = (youtubePlaylist) => {\n  // \tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n  // };\n\n  // const handlePrevious = (youtubePlaylist) => {\n  // \tsetYoutubeCurrentIndex((prevIndex) => {\n  // \t\tconst newIndex = prevIndex - 1;\n  // \t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n  // \t});\n  // };\n\n  // const handlePlaylistEnd = () => {\n  // \tsetYoutubeCurrentIndex(0);\n  // };\n\n  // const youtubePlaylists = [\n  // \t{\n  // \t\tplaylistTitle: \"Brett Emmons\",\n  // \t\tid: 0,\n  // \t\tsongs: [\n  // \t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n  // \t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n  // \t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n  // \t\t],\n  // \t},\n  // \t{\n  // \t\tplaylistTitle: \"J.Cole\",\n  // \t\tid: 1,\n  // \t\tsongs: [\n  // \t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n  // \t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n  // \t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n  // \t\t],\n  // \t},\n  // \t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n  // ];\n\n  // const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n  // const playlistAlbumCovers = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.album.images[0].url);\n  // // console.log(playlistAlbumCovers);\n  // console.log(currentTrack);\n  return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n      spotifyPlaylists: spotifyPlaylists,\n      youtubePlaylists: youtubePlaylists,\n      spotifyHandlePlaylistSelect: spotifyHandlePlaylistSelect,\n      youtubeHandlePlaylistSelect: youtubeHandlePlaylistSelect,\n      setSpotifySelectedPlaylist: setSpotifySelectedPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MediaPanel, {\n      accessToken: accessToken,\n      trackUri: (_currentTrack = currentTrack) === null || _currentTrack === void 0 ? void 0 : _currentTrack.uri,\n      playlistUri: spotifyTrackURIs,\n      playlistAlbumCovers: playlistAlbumCovers,\n      isSpotifySong: isSpotifySong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Tracks, {\n      spotifySelectedPlaylist: spotifySelectedPlaylist,\n      spotifyPlaylistTracks: spotifyPlaylistTracks,\n      spotifyChooseTrack: spotifyChooseTrack,\n      youtubeSelectedPlaylist: youtubeSelectedPlaylist,\n      youtubePlaylistTracks: youtubePlaylistTracks,\n      youtubeChooseTrack: youtubeChooseTrack,\n      setIsSpotifySong: setIsSpotifySong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 3\n  }, this);\n}\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","useEffect","useAuth","SpotifyWebApi","Tracks","ControlPanel","YoutubePlayer","SpotifyPlayer","MediaPanel","YoutubeAuth","Login","jsxDEV","_jsxDEV","API_BASE_URL","spotifyApi","clientId","Dashboard","_currentTrack","className","children","spotifyPlaylists","youtubePlaylists","spotifyHandlePlaylistSelect","youtubeHandlePlaylistSelect","setSpotifySelectedPlaylist","fileName","_jsxFileName","lineNumber","columnNumber","accessToken","trackUri","currentTrack","uri","playlistUri","spotifyTrackURIs","playlistAlbumCovers","isSpotifySong","spotifySelectedPlaylist","spotifyPlaylistTracks","spotifyChooseTrack","youtubeSelectedPlaylist","youtubePlaylistTracks","youtubeChooseTrack","setIsSpotifySong","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/Dashboard.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport useAuth from \"./components/useAuth\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport Tracks from \"./components/Tracks\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport YoutubePlayer from \"./components/YoutubePlayer\";\nimport SpotifyPlayer from \"./components/SpotifyPlayer\";\nimport MediaPanel from \"./components/MediaPanel\";\nimport YoutubeAuth from \"./components/YoutubeAuth\";\nimport Login from \"./Login\";\n\nconst API_BASE_URL = \"https://api.spotify.com/v1\";\nconst spotifyApi = new SpotifyWebApi({\n\tclientId: \"8b945ef10ea24755b83ac50cede405a0\",\n});\n\nexport default function Dashboard() {\n\t/**-----------------------------------------------------------------------------------------------------------------------\n\t *                                                    SPOTIFY\n\t *-----------------------------------------------------------------------------------------------------------------------**/\n\n\t// const code = new URLSearchParams(window.location.search).get(\"code\");\n\t// const accessToken = useAuth(code);\n\t// const [currentTrack, setCurrentTrack] = useState();\n\t// const [platform, setPlatform] = useState(null);\n\t// const [spotifyPlaylists, setSpotifyPlaylists] = useState([]);\n\t// const [spotifySelectedPlaylist, setSpotifySelectedPlaylist] = useState(null);\n\t// const [spotifyPlaylistTracks, setSpotifyPlaylistTracks] = useState([]);\n\t// const [isSpotifySong, setIsSpotifySong] = useState(false);\n\n\t// useEffect(() => {\n\t// \tif (!accessToken) return;\n\t// \tspotifyApi.setAccessToken(accessToken);\n\t// \tfetchPlaylists();\n\t// }, [accessToken]);\n\n\t// const fetchPlaylists = async () => {\n\t// \ttry {\n\t// \t\tlet playlists = [];\n\t// \t\tlet nextUrl = `${API_BASE_URL}/me/playlists`;\n\n\t// \t\twhile (nextUrl) {\n\t// \t\t\tconst response = await fetch(nextUrl, {\n\t// \t\t\t\theaders: {\n\t// \t\t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t// \t\t\t\t},\n\t// \t\t\t});\n\n\t// \t\t\tif (response.ok) {\n\t// \t\t\t\tconst data = await response.json();\n\t// \t\t\t\tplaylists = playlists.concat(data.items);\n\t// \t\t\t\tnextUrl = data.next; // Get the URL for the next page of playlists\n\t// \t\t\t} else {\n\t// \t\t\t\tconsole.log(\"Error:\", response.status);\n\t// \t\t\t\tbreak; // Stop fetching if there's an error\n\t// \t\t\t}\n\t// \t\t}\n\n\t// \t\tsetSpotifyPlaylists(playlists);\n\t// \t} catch (error) {\n\t// \t\tconsole.log(\"Error:\", error);\n\t// \t}\n\t// };\n\n\t// const fetchPlaylistTracks = async (playlistId) => {\n\t// \ttry {\n\t// \t\tconst response = await fetch(`${API_BASE_URL}/playlists/${playlistId}/tracks`, {\n\t// \t\t\theaders: {\n\t// \t\t\t\tAuthorization: `Bearer ${accessToken}`,\n\t// \t\t\t},\n\t// \t\t});\n\n\t// \t\tif (response.ok) {\n\t// \t\t\tconst data = await response.json();\n\t// \t\t\tsetSpotifyPlaylistTracks(data.items);\n\t// \t\t} else {\n\t// \t\t\tconsole.log(\"Error:\", response.status);\n\t// \t\t}\n\t// \t} catch (error) {\n\t// \t\tconsole.log(\"Error:\", error);\n\t// \t}\n\t// };\n\n\t// const spotifyHandlePlaylistSelect = async (playlist) => {\n\t// \tsetSpotifySelectedPlaylist(playlist);\n\t// \tawait fetchPlaylistTracks(playlist.id);\n\t// };\n\n\t// const spotifyDeselectPlaylist = () => {\n\t// \tconsole.log(\"Deselect\");\n\t// \tsetSpotifySelectedPlaylist(null);\n\t// };\n\n\t// const spotifyChooseTrack = (track) => {\n\t// \tsetCurrentTrack(track);\n\t// };\n\n\t// /**-----------------------------------------------------------------------------------------------------------------------\n\t//  *                                                    YOUTUBE\n\t//  *-----------------------------------------------------------------------------------------------------------------------**/\n\n\t// const [player, setPlayer] = useState(null);\n\t// const [youtubeCurrentIndex, setYoutubeCurrentIndex] = useState(0);\n\t// const [youtubeIsPlaying, setYoutubeIsPlaying] = useState(false);\n\t// const [youtubePlaylistTracks, setYoutubePlaylistTracks] = useState([]);\n\t// const [youtubeSelectedPlaylist, setYouTubeSelectedPlaylist] = useState(null);\n\n\t// const fetchYoutubePlaylistTracks = async (playlistId) => {\n\t// \tsetYoutubePlaylistTracks(youtubePlaylists[playlistId].songs);\n\t// };\n\t// const youtubeHandlePlaylistSelect = async (playlist) => {\n\t// \tsetYouTubeSelectedPlaylist(playlist);\n\t// \tconsole.log(\"hello\");\n\t// \tawait fetchYoutubePlaylistTracks(playlist.id);\n\t// };\n\t// const handlePlayerReady = (event) => {\n\t// \tsetPlayer(event.target);\n\t// \t// setYoutubeCurrentIndex(0);\n\t// \tconsole.log(\"Player Ready:\", event.target);\n\t// };\n\t// const youtubeChooseTrack = (songId) => {\n\t// \tconsole.log(songId);\n\t// \tsetYoutubeIsPlaying(true);\n\t// \tsetYoutubeCurrentIndex(songId);\n\t// };\n\n\t// const handlePlay = () => {\n\t// \tsetYoutubeIsPlaying(true);\n\t// \tplayer.playVideo();\n\t// };\n\n\t// const handlePause = () => {\n\t// \tsetYoutubeIsPlaying(false);\n\t// \tplayer.pauseVideo();\n\t// };\n\n\t// const handleNext = (youtubePlaylist) => {\n\t// \tsetYoutubeCurrentIndex((prevIndex) => (prevIndex + 1) % youtubePlaylist.length);\n\t// };\n\n\t// const handlePrevious = (youtubePlaylist) => {\n\t// \tsetYoutubeCurrentIndex((prevIndex) => {\n\t// \t\tconst newIndex = prevIndex - 1;\n\t// \t\treturn newIndex < 0 ? youtubePlaylist.length - 1 : newIndex;\n\t// \t});\n\t// };\n\n\t// const handlePlaylistEnd = () => {\n\t// \tsetYoutubeCurrentIndex(0);\n\t// };\n\n\t// const youtubePlaylists = [\n\t// \t{\n\t// \t\tplaylistTitle: \"Brett Emmons\",\n\t// \t\tid: 0,\n\t// \t\tsongs: [\n\t// \t\t\t{ name: \"Bull and the Matador\", artist: \"Brett Emmons\", url: \"ZWVGr7cQZ_Y\", songId: 0 },\n\t// \t\t\t{ name: \"Shambles\", artist: \"Brett Emmons\", url: \"Ti4blSWS6bY\", songId: 1 },\n\t// \t\t\t{ name: \"Heavy\", artist: \"Brett Emmons\", url: \"8puqbXK3k-w\", songId: 2 },\n\t// \t\t],\n\t// \t},\n\t// \t{\n\t// \t\tplaylistTitle: \"J.Cole\",\n\t// \t\tid: 1,\n\t// \t\tsongs: [\n\t// \t\t\t{ name: \"i'm a Fool\", artist: \"J.cole\", url: \"mgRzTTMLfEs\", songId: 0 },\n\t// \t\t\t{ name: \"Can I Holla At you\", artist: \"J.cole\", url: \"v9ejF5AumDk\", songId: 1 },\n\t// \t\t\t{ name: \"It Won't Be Long\", artist: \"J.cole\", url: \"jNBXU26tRDY\", songId: 2 },\n\t// \t\t],\n\t// \t},\n\t// \t// { name: \"Live Songs\", songs: [\"ZWVGr7cQZ_Y\", \"Ti4blSWS6bY\", \"8puqbXK3k-w\"] },\n\t// ];\n\n\t// const spotifyTrackURIs = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.uri);\n\t// const playlistAlbumCovers = spotifyPlaylistTracks.map((playlistTrack) => playlistTrack.track.album.images[0].url);\n\t// // console.log(playlistAlbumCovers);\n\t// console.log(currentTrack);\n\treturn null;\n\treturn (\n\t\t<div className=\"dashboard\">\n\t\t\t<ControlPanel spotifyPlaylists={spotifyPlaylists} youtubePlaylists={youtubePlaylists} spotifyHandlePlaylistSelect={spotifyHandlePlaylistSelect} youtubeHandlePlaylistSelect={youtubeHandlePlaylistSelect} setSpotifySelectedPlaylist={setSpotifySelectedPlaylist} />\n\t\t\t<MediaPanel accessToken={accessToken} trackUri={currentTrack?.uri} playlistUri={spotifyTrackURIs} playlistAlbumCovers={playlistAlbumCovers} isSpotifySong={isSpotifySong} />\n\t\t\t<Tracks spotifySelectedPlaylist={spotifySelectedPlaylist} spotifyPlaylistTracks={spotifyPlaylistTracks} spotifyChooseTrack={spotifyChooseTrack} youtubeSelectedPlaylist={youtubeSelectedPlaylist} youtubePlaylistTracks={youtubePlaylistTracks} youtubeChooseTrack={youtubeChooseTrack} setIsSpotifySong={setIsSpotifySong} />\n\n\t\t\t{/* {youtubeSelectedPlaylist && <YoutubePlayer youtubePlaylist={youtubePlaylists[youtubeSelectedPlaylist.id]} handlePrevious={handlePrevious} handleNext={handleNext} handlePlay={handlePlay} handlePause={handlePause} handlePlaylistEnd={handlePlaylistEnd} youtubeCurrentIndex={youtubeCurrentIndex} youtubeIsPlaying={youtubeIsPlaying} handlePlayerReady={handlePlayerReady} />} */}\n\n\t\t\t{/* <div className=\"Spotify-Player\"> */}\n\t\t\t{/* <SpotifyPlayer accessToken={accessToken} currentTrack={currentTrack}></SpotifyPlayer> */}\n\n\t\t\t{/* </div> */}\n\t\t</div>\n\t);\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,YAAY,GAAG,4BAA4B;AACjD,MAAMC,UAAU,GAAG,IAAIX,aAAa,CAAC;EACpCY,QAAQ,EAAE;AACX,CAAC,CAAC;AAEF,eAAe,SAASC,SAASA,CAAA,EAAG;EAAA,IAAAC,aAAA;EACnC;AACD;AACA;;EAEC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAO,IAAI;EACX,oBACCL,OAAA;IAAKM,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACzBP,OAAA,CAACP,YAAY;MAACe,gBAAgB,EAAEA,gBAAiB;MAACC,gBAAgB,EAAEA,gBAAiB;MAACC,2BAA2B,EAAEA,2BAA4B;MAACC,2BAA2B,EAAEA,2BAA4B;MAACC,0BAA0B,EAAEA;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpQhB,OAAA,CAACJ,UAAU;MAACqB,WAAW,EAAEA,WAAY;MAACC,QAAQ,GAAAb,aAAA,GAAEc,YAAY,cAAAd,aAAA,uBAAZA,aAAA,CAAce,GAAI;MAACC,WAAW,EAAEC,gBAAiB;MAACC,mBAAmB,EAAEA,mBAAoB;MAACC,aAAa,EAAEA;IAAc;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5KhB,OAAA,CAACR,MAAM;MAACiC,uBAAuB,EAAEA,uBAAwB;MAACC,qBAAqB,EAAEA,qBAAsB;MAACC,kBAAkB,EAAEA,kBAAmB;MAACC,uBAAuB,EAAEA,uBAAwB;MAACC,qBAAqB,EAAEA,qBAAsB;MAACC,kBAAkB,EAAEA,kBAAmB;MAACC,gBAAgB,EAAEA;IAAiB;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQ1T,CAAC;AAER;AAACgB,EAAA,GAhLuB5B,SAAS;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}