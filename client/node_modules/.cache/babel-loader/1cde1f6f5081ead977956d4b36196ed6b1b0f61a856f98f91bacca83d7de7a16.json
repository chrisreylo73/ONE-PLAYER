{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\Tracks.jsx\",\n  _s = $RefreshSig$();\nimport SpotifySong from \"./SpotifySong\";\nimport YoutubeSong from \"./YoutubeSong\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tracks = ({\n  spotifySelectedPlaylist,\n  youtubeSelectedPlaylist,\n  youtubePlaylistTracks,\n  youtubeChooseTrack,\n  spotifyPlaylistTracks,\n  spotifyChooseTrack\n}) => {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n  if (spotifySelectedPlaylist == null && youtubeSelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }, this);\n  } else if (spotifySelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-youtube\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: youtubeSelectedPlaylist.playlistTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this), youtubePlaylistTracks.map(youtubePlaylistTrack => /*#__PURE__*/_jsxDEV(YoutubeSong, {\n        youtubeChooseTrack: youtubeChooseTrack,\n        track: youtubePlaylistTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 6\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 4\n    }, this);\n  } else if (youtubeSelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-spotify\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: spotifySelectedPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), spotifyPlaylistTracks.map(playlistTrack => {\n        const track = playlistTrack.track;\n        return /*#__PURE__*/_jsxDEV(SpotifySong, {\n          spotifyChooseTrack: spotifyChooseTrack,\n          track: track\n        }, track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-spotify\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: spotifySelectedPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this), spotifyPlaylistTracks.map(playlistTrack => {\n        const track = playlistTrack.track;\n        return /*#__PURE__*/_jsxDEV(SpotifySong, {\n          spotifyChooseTrack: spotifyChooseTrack,\n          track: track\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-youtube\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: youtubeSelectedPlaylist.playlistTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), youtubePlaylistTracks.map(youtubePlaylistTrack => /*#__PURE__*/_jsxDEV(YoutubeSong, {\n        youtubeChooseTrack: youtubeChooseTrack,\n        track: youtubePlaylistTrack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this);\n  }\n};\n_s(Tracks, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = Tracks;\nexport default Tracks;\nvar _c;\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"names":["SpotifySong","YoutubeSong","useState","jsxDEV","_jsxDEV","Tracks","spotifySelectedPlaylist","youtubeSelectedPlaylist","youtubePlaylistTracks","youtubeChooseTrack","spotifyPlaylistTracks","spotifyChooseTrack","_s","isHovered","setIsHovered","handleMouseEnter","handleMouseLeave","className","fileName","_jsxFileName","lineNumber","columnNumber","children","style","textTransform","playlistTitle","map","youtubePlaylistTrack","track","name","playlistTrack","id","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/Tracks.jsx"],"sourcesContent":["import SpotifySong from \"./SpotifySong\";\r\nimport YoutubeSong from \"./YoutubeSong\";\r\nimport { useState } from \"react\";\r\n\r\nconst Tracks = ({ spotifySelectedPlaylist, youtubeSelectedPlaylist, youtubePlaylistTracks, youtubeChooseTrack, spotifyPlaylistTracks, spotifyChooseTrack }) => {\r\n\tconst [isHovered, setIsHovered] = useState(false);\r\n\tconst handleMouseEnter = () => {\r\n\t\tsetIsHovered(true);\r\n\t};\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetIsHovered(false);\r\n\t};\r\n\r\n\tif (spotifySelectedPlaylist == null && youtubeSelectedPlaylist == null) {\r\n\t\treturn <div className=\"tracks\"></div>;\r\n\t} else if (spotifySelectedPlaylist == null) {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-youtube\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{youtubeSelectedPlaylist.playlistTitle}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{youtubePlaylistTracks.map((youtubePlaylistTrack) => (\r\n\t\t\t\t\t<YoutubeSong youtubeChooseTrack={youtubeChooseTrack} track={youtubePlaylistTrack} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else if (youtubeSelectedPlaylist == null) {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-spotify\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{spotifySelectedPlaylist.name}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{spotifyPlaylistTracks.map((playlistTrack) => {\r\n\t\t\t\t\tconst track = playlistTrack.track;\r\n\t\t\t\t\treturn <SpotifySong key={track.id} spotifyChooseTrack={spotifyChooseTrack} track={track} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-spotify\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{spotifySelectedPlaylist.name}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{spotifyPlaylistTracks.map((playlistTrack) => {\r\n\t\t\t\t\tconst track = playlistTrack.track;\r\n\t\t\t\t\treturn <SpotifySong spotifyChooseTrack={spotifyChooseTrack} track={track} />;\r\n\t\t\t\t})}\r\n\r\n\t\t\t\t<div className=\"playlistHeaders-youtube\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{youtubeSelectedPlaylist.playlistTitle}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{youtubePlaylistTracks.map((youtubePlaylistTrack) => (\r\n\t\t\t\t\t<YoutubeSong youtubeChooseTrack={youtubeChooseTrack} track={youtubePlaylistTrack} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Tracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}