{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\Player.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  accessToken,\n  trackUri,\n  playlistUri\n}) {\n  _s();\n  const [play, setPlay] = useState(false);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0); // Add state for the current song index\n\n  useEffect(() => {\n    setPlay(true);\n    const newIndex = playlistUri.findIndex(uri => uri === trackUri);\n    setCurrentSongIndex(newIndex);\n    console.log(newIndex); // Find the new index based on the provided trackUri\n  }, [trackUri]);\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    styles: {\n      activeColor: \"#fff\",\n      bgColor: \"#242424\",\n      color: \"#fff\",\n      loaderColor: \"#fff\",\n      sliderColor: \"#1cb954\",\n      trackArtistColor: \"#ccc\",\n      trackNameColor: \"#fff\",\n      sliderTrackBorderRadius: 10\n      // Layout: \"responsive\",\n    },\n\n    token: accessToken\n    // showSaveIcon\n    ,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n      const currentSongIndex = playlistUri.findIndex(uri => {\n        var _state$track;\n        return uri === ((_state$track = state.track) === null || _state$track === void 0 ? void 0 : _state$track.uri);\n      });\n      console.log(currentSongIndex);\n    },\n    magnifySliderOnHover: true,\n    offset: currentSongIndex,\n    shuffle: true,\n    play: play,\n    uris: playlistUri\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n}\n_s(Player, \"QnDcUXx7miBGxZFvQq/qFC7Jh3c=\");\n_c = Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["useState","useEffect","SpotifyPlayer","jsxDEV","_jsxDEV","Player","accessToken","trackUri","playlistUri","_s","play","setPlay","currentSongIndex","setCurrentSongIndex","newIndex","findIndex","uri","console","log","styles","activeColor","bgColor","color","loaderColor","sliderColor","trackArtistColor","trackNameColor","sliderTrackBorderRadius","token","callback","state","isPlaying","_state$track","track","magnifySliderOnHover","offset","shuffle","uris","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/Player.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\nexport default function Player({ accessToken, trackUri, playlistUri }) {\n\tconst [play, setPlay] = useState(false);\n\tconst [currentSongIndex, setCurrentSongIndex] = useState(0); // Add state for the current song index\n\n\tuseEffect(() => {\n\t\tsetPlay(true);\n\t\tconst newIndex = playlistUri.findIndex((uri) => uri === trackUri);\n\t\tsetCurrentSongIndex(newIndex);\n\t\tconsole.log(newIndex); // Find the new index based on the provided trackUri\n\t}, [trackUri]);\n\n\treturn (\n\t\t<SpotifyPlayer\n\t\t\tstyles={{\n\t\t\t\tactiveColor: \"#fff\",\n\t\t\t\tbgColor: \"#242424\",\n\t\t\t\tcolor: \"#fff\",\n\t\t\t\tloaderColor: \"#fff\",\n\t\t\t\tsliderColor: \"#1cb954\",\n\t\t\t\ttrackArtistColor: \"#ccc\",\n\t\t\t\ttrackNameColor: \"#fff\",\n\t\t\t\tsliderTrackBorderRadius: 10,\n\t\t\t\t// Layout: \"responsive\",\n\t\t\t}}\n\t\t\ttoken={accessToken}\n\t\t\t// showSaveIcon\n\t\t\tcallback={(state) => {\n\t\t\t\tif (!state.isPlaying) setPlay(false);\n\t\t\t\tconst currentSongIndex = playlistUri.findIndex((uri) => uri === state.track?.uri);\n\t\t\t\tconsole.log(currentSongIndex);\n\t\t\t}}\n\t\t\tmagnifySliderOnHover={true}\n\t\t\toffset={currentSongIndex}\n\t\t\tshuffle\n\t\t\tplay={play}\n\t\t\turis={playlistUri}\n\t\t/>\n\t);\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,MAAMA,CAAC;EAAEC,WAAW;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACtE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE7DC,SAAS,CAAC,MAAM;IACfU,OAAO,CAAC,IAAI,CAAC;IACb,MAAMG,QAAQ,GAAGN,WAAW,CAACO,SAAS,CAAEC,GAAG,IAAKA,GAAG,KAAKT,QAAQ,CAAC;IACjEM,mBAAmB,CAACC,QAAQ,CAAC;IAC7BG,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC,CAAC,CAAC;EACxB,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,oBACCH,OAAA,CAACF,aAAa;IACbiB,MAAM,EAAE;MACPC,WAAW,EAAE,MAAM;MACnBC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE,MAAM;MACbC,WAAW,EAAE,MAAM;MACnBC,WAAW,EAAE,SAAS;MACtBC,gBAAgB,EAAE,MAAM;MACxBC,cAAc,EAAE,MAAM;MACtBC,uBAAuB,EAAE;MACzB;IACD,CAAE;;IACFC,KAAK,EAAEtB;IACP;IAAA;IACAuB,QAAQ,EAAGC,KAAK,IAAK;MACpB,IAAI,CAACA,KAAK,CAACC,SAAS,EAAEpB,OAAO,CAAC,KAAK,CAAC;MACpC,MAAMC,gBAAgB,GAAGJ,WAAW,CAACO,SAAS,CAAEC,GAAG;QAAA,IAAAgB,YAAA;QAAA,OAAKhB,GAAG,OAAAgB,YAAA,GAAKF,KAAK,CAACG,KAAK,cAAAD,YAAA,uBAAXA,YAAA,CAAahB,GAAG;MAAA,EAAC;MACjFC,OAAO,CAACC,GAAG,CAACN,gBAAgB,CAAC;IAC9B,CAAE;IACFsB,oBAAoB,EAAE,IAAK;IAC3BC,MAAM,EAAEvB,gBAAiB;IACzBwB,OAAO;IACP1B,IAAI,EAAEA,IAAK;IACX2B,IAAI,EAAE7B;EAAY;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEJ;AAAChC,EAAA,CAtCuBJ,MAAM;AAAAqC,EAAA,GAANrC,MAAM;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}