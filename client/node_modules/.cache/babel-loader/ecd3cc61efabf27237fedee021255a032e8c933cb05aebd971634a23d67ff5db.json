{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\SpotifySong.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SpotifySong = ({\n  spotifyChooseTrack,\n  track\n}) => {\n  const minutes = Math.floor(track.duration_ms / 60000);\n  const seconds = Math.floor(track.duration_ms % 60000 / 1000);\n  const formattedLength = track.duration_ms ? `${minutes}:${seconds.toString().padStart(2, \"0\")}` : \"length?\";\n  function handlePlay() {\n    setIsSpotifySong(true);\n    spotifyChooseTrack(track);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"song\",\n    onClick: handlePlay,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"album-cover\",\n      src: track.album.images[0].url,\n      alt: \"Album Cover\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"songInfo\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"title\",\n        children: track.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"artist\",\n        children: track.artists[0].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: formattedLength\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n};\n_c = SpotifySong;\nSpotifySong.defaultProps = {\n  title: \"Title?\",\n  album: \"Album?\",\n  length: \"Length?\"\n};\nexport default SpotifySong;\n// const albumCover = track.album.images[0].url;\n// const title = track.name;\n// const artist = track.artists[0].name;\n// const album = track.album.name;\n// const length = track.duration_ms;\nvar _c;\n$RefreshReg$(_c, \"SpotifySong\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SpotifySong","spotifyChooseTrack","track","minutes","Math","floor","duration_ms","seconds","formattedLength","toString","padStart","handlePlay","setIsSpotifySong","className","onClick","children","src","album","images","url","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","name","artists","_c","defaultProps","title","length","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/SpotifySong.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst SpotifySong = ({ spotifyChooseTrack, track }) => {\r\n\tconst minutes = Math.floor(track.duration_ms / 60000);\r\n\tconst seconds = Math.floor((track.duration_ms % 60000) / 1000);\r\n\tconst formattedLength = track.duration_ms ? `${minutes}:${seconds.toString().padStart(2, \"0\")}` : \"length?\";\r\n\tfunction handlePlay() {\r\n\t\tsetIsSpotifySong(true);\r\n\t\tspotifyChooseTrack(track);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"song\" onClick={handlePlay}>\r\n\t\t\t<img className=\"album-cover\" src={track.album.images[0].url} alt=\"Album Cover\" />\r\n\t\t\t<div className=\"songInfo\">\r\n\t\t\t\t<p id=\"title\">{track.name}</p>\r\n\t\t\t\t<p id=\"artist\">{track.artists[0].name}</p>\r\n\t\t\t</div>\r\n\t\t\t<p>{formattedLength}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nSpotifySong.defaultProps = {\r\n\ttitle: \"Title?\",\r\n\talbum: \"Album?\",\r\n\tlength: \"Length?\",\r\n};\r\n\r\nexport default SpotifySong;\r\n// const albumCover = track.album.images[0].url;\r\n// const title = track.name;\r\n// const artist = track.artists[0].name;\r\n// const album = track.album.name;\r\n// const length = track.duration_ms;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,kBAAkB;EAAEC;AAAM,CAAC,KAAK;EACtD,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,WAAW,GAAG,KAAK,CAAC;EACrD,MAAMC,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAEH,KAAK,CAACI,WAAW,GAAG,KAAK,GAAI,IAAI,CAAC;EAC9D,MAAME,eAAe,GAAGN,KAAK,CAACI,WAAW,GAAI,GAAEH,OAAQ,IAAGI,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC,GAAG,SAAS;EAC3G,SAASC,UAAUA,CAAA,EAAG;IACrBC,gBAAgB,CAAC,IAAI,CAAC;IACtBX,kBAAkB,CAACC,KAAK,CAAC;EAC1B;EACA,oBACCH,OAAA;IAAKc,SAAS,EAAC,MAAM;IAACC,OAAO,EAAEH,UAAW;IAAAI,QAAA,gBACzChB,OAAA;MAAKc,SAAS,EAAC,aAAa;MAACG,GAAG,EAAEd,KAAK,CAACe,KAAK,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,GAAI;MAACC,GAAG,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjFzB,OAAA;MAAKc,SAAS,EAAC,UAAU;MAAAE,QAAA,gBACxBhB,OAAA;QAAG0B,EAAE,EAAC,OAAO;QAAAV,QAAA,EAAEb,KAAK,CAACwB;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9BzB,OAAA;QAAG0B,EAAE,EAAC,QAAQ;QAAAV,QAAA,EAAEb,KAAK,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACD;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACNzB,OAAA;MAAAgB,QAAA,EAAIP;IAAe;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAER,CAAC;AAACI,EAAA,GAlBI5B,WAAW;AAoBjBA,WAAW,CAAC6B,YAAY,GAAG;EAC1BC,KAAK,EAAE,QAAQ;EACfb,KAAK,EAAE,QAAQ;EACfc,MAAM,EAAE;AACT,CAAC;AAED,eAAe/B,WAAW;AAC1B;AACA;AACA;AACA;AACA;AAAA,IAAA4B,EAAA;AAAAI,YAAA,CAAAJ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}