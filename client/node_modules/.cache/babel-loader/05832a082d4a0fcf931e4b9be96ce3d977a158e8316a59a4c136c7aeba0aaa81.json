{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chris\\\\Desktop\\\\Spotify-Weather\\\\client\\\\src\\\\components\\\\Tracks.jsx\",\n  _s = $RefreshSig$();\nimport SpotifySong from \"./SpotifySong\";\nimport YoutubeSong from \"./YoutubeSong\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tracks = ({\n  spotifySelectedPlaylist,\n  youtubeSelectedPlaylist,\n  youtubePlaylistTracks,\n  youtubeChooseTrack,\n  spotifyPlaylistTracks,\n  spotifyChooseTrack\n}) => {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n  };\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n  if (spotifySelectedPlaylist == null && youtubeSelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 10\n    }, this);\n  } else if (spotifySelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-youtube\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: youtubeSelectedPlaylist.playlistTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: youtubePlaylistTracks.map(youtubePlaylistTrack => {\n          return /*#__PURE__*/_jsxDEV(YoutubeSong, {\n            youtubeChooseTrack: youtubeChooseTrack,\n            track: youtubePlaylistTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 14\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this);\n  } else if (youtubeSelectedPlaylist == null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-spotify\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: spotifySelectedPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tracks-content\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: spotifyPlaylistTracks.map(playlistTrack => {\n            const track = playlistTrack.track;\n            return /*#__PURE__*/_jsxDEV(SpotifySong, {\n              spotifyChooseTrack: spotifyChooseTrack,\n              track: track\n            }, track.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tracks\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-spotify\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: spotifySelectedPlaylist.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tracks-content\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: spotifyPlaylistTracks.map(playlistTrack => {\n            const track = playlistTrack.track;\n            return /*#__PURE__*/_jsxDEV(SpotifySong, {\n              spotifyChooseTrack: spotifyChooseTrack,\n              track: track\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playlistHeaders-youtube\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            textTransform: \"uppercase\"\n          },\n          children: youtubeSelectedPlaylist.playlistTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tracks-content\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: youtubePlaylistTracks.map(youtubePlaylistTrack => {\n            return /*#__PURE__*/_jsxDEV(YoutubeSong, {\n              youtubeChooseTrack: youtubeChooseTrack,\n              track: youtubePlaylistTrack\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this);\n  }\n};\n_s(Tracks, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = Tracks;\nexport default Tracks;\nvar _c;\n$RefreshReg$(_c, \"Tracks\");","map":{"version":3,"names":["SpotifySong","YoutubeSong","useState","jsxDEV","_jsxDEV","Tracks","spotifySelectedPlaylist","youtubeSelectedPlaylist","youtubePlaylistTracks","youtubeChooseTrack","spotifyPlaylistTracks","spotifyChooseTrack","_s","isHovered","setIsHovered","handleMouseEnter","handleMouseLeave","className","fileName","_jsxFileName","lineNumber","columnNumber","children","style","textTransform","playlistTitle","map","youtubePlaylistTrack","track","name","playlistTrack","id","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/Tracks.jsx"],"sourcesContent":["import SpotifySong from \"./SpotifySong\";\r\nimport YoutubeSong from \"./YoutubeSong\";\r\nimport { useState } from \"react\";\r\nconst Tracks = ({ spotifySelectedPlaylist, youtubeSelectedPlaylist, youtubePlaylistTracks, youtubeChooseTrack, spotifyPlaylistTracks, spotifyChooseTrack }) => {\r\n\tconst [isHovered, setIsHovered] = useState(false);\r\n\tconst handleMouseEnter = () => {\r\n\t\tsetIsHovered(true);\r\n\t};\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetIsHovered(false);\r\n\t};\r\n\r\n\tif (spotifySelectedPlaylist == null && youtubeSelectedPlaylist == null) {\r\n\t\treturn <div className=\"tracks\"></div>;\r\n\t} else if (spotifySelectedPlaylist == null) {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-youtube\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{youtubeSelectedPlaylist.playlistTitle}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* <div className=\"tracks-content\"> */}\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{youtubePlaylistTracks.map((youtubePlaylistTrack) => {\r\n\t\t\t\t\t\treturn <YoutubeSong youtubeChooseTrack={youtubeChooseTrack} track={youtubePlaylistTrack} />;\r\n\t\t\t\t\t})}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{/* </div> */}\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else if (youtubeSelectedPlaylist == null) {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-spotify\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{spotifySelectedPlaylist.name}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"tracks-content\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{spotifyPlaylistTracks.map((playlistTrack) => {\r\n\t\t\t\t\t\t\tconst track = playlistTrack.track;\r\n\t\t\t\t\t\t\treturn <SpotifySong key={track.id} spotifyChooseTrack={spotifyChooseTrack} track={track} />;\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"tracks\">\r\n\t\t\t\t<div className=\"playlistHeaders-spotify\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{spotifySelectedPlaylist.name}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"tracks-content\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{spotifyPlaylistTracks.map((playlistTrack) => {\r\n\t\t\t\t\t\t\tconst track = playlistTrack.track;\r\n\t\t\t\t\t\t\treturn <SpotifySong spotifyChooseTrack={spotifyChooseTrack} track={track} />;\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"playlistHeaders-youtube\">\r\n\t\t\t\t\t<h3 style={{ textTransform: \"uppercase\" }}>{youtubeSelectedPlaylist.playlistTitle}</h3>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"tracks-content\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{youtubePlaylistTracks.map((youtubePlaylistTrack) => {\r\n\t\t\t\t\t\t\treturn <YoutubeSong youtubeChooseTrack={youtubeChooseTrack} track={youtubePlaylistTrack} />;\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default Tracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}