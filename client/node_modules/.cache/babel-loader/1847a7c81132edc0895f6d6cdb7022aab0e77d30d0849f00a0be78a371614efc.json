{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nconst SpotifyPlayer = ({\n  accessToken,\n  currentTrack\n}) => {\n  window.onSpotifyWebPlaybackSDKReady = () => {\n    const player = new Spotify.Player({\n      name: \"Web Playback SDK Quick Start Player\",\n      getOAuthToken: cb => {\n        cb(accessToken);\n      }\n    });\n  }, [accessToken];\n};\n_c = SpotifyPlayer;\nexport default SpotifyPlayer;\n// const [player, setPlayer] = useState(null);\n// const [isPaused, setPaused] = useState(false);\n// useEffect(() => {\n// \tconst script = document.createElement(\"script\");\n// \tscript.src = \"https://sdk.scdn.co/spotify-player.js\";\n// \tscript.async = true;\n// \tdocument.body.appendChild(script);\n// \twindow.onSpotifyWebPlaybackSDKReady = () => {\n// \t\tconst newPlayer = new window.Spotify.Player({\n// \t\t\tname: \"React Spotify Player\",\n// \t\t\tgetOAuthToken: (cb) => {\n// \t\t\t\tcb(accessToken);\n// \t\t\t},\n// \t\t});\n// \t\tsetPlayer(newPlayer);\n// \t\tnewPlayer.connect().then((success) => {\n// \t\t\tif (success) {\n// \t\t\t\tconsole.log(\"Connected to Spotify player!\");\n// \t\t\t}\n// \t\t});\n// \t};\n// \treturn () => {\n// \t\tif (player !== null) {\n// \t\t\tplayer.disconnect();\n// \t\t}\n// \t};\n// }, [accessToken]);\n// useEffect(() => {\n// \tif (currentTrack?.uri) {\n// \t\tplayer.resume();\n// \t\tplayer.addListener(\"ready\", ({ device_id }) => {\n// \t\t\tplayer._options.id = device_id;\n// \t\t\tplayer._options.getOAuthToken((access_token) => {\n// \t\t\t\tfetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\n// \t\t\t\t\tmethod: \"PUT\",\n// \t\t\t\t\tbody: JSON.stringify({ uris: [currentTrack?.uri] }),\n// \t\t\t\t\theaders: {\n// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\n// \t\t\t\t\t\tAuthorization: `Bearer ${access_token}`,\n// \t\t\t\t\t},\n// \t\t\t\t});\n// \t\t\t});\n// \t\t});\n// \t}\n// }, [currentTrack.uri]);\n// const handlePreviousTrack = () => {\n// \tif (player !== null) {\n// \t\tplayer.previousTrack();\n// \t}\n// };\n// const handleTogglePlay = () => {\n// \tif (player !== null) {\n// \t\tplayer.togglePlay();\n// \t\tsetPaused(!isPaused);\n// \t}\n// };\n// const handleNextTrack = () => {\n// \tif (player !== null) {\n// \t\tplayer.nextTrack();\n// \t}\n// };\n// if (currentTrack != null) {\n// \treturn (\n// \t\t<div id=\"spotify-player\">\n// \t\t\t<div className=\"main-wrapper\">\n// \t\t\t\t<img src={currentTrack.album.images[0].url} className=\"now-playing__cover\" alt=\"\" />\n// \t\t\t\t<div className=\"now-playing__side\">\n// \t\t\t\t\t<div className=\"now-playing__name\">{currentTrack.name}</div>\n// \t\t\t\t\t<div className=\"now-playing__artist\">{currentTrack.artists[0].name}</div>\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handlePreviousTrack}>\n// \t\t\t\t\t\t&lt;&lt;\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleTogglePlay}>\n// \t\t\t\t\t\t{isPaused ? \"PLAY\" : \"PAUSE\"}\n// \t\t\t\t\t</button>\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleNextTrack}>\n// \t\t\t\t\t\t&gt;&gt;\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n// } else {\n// \treturn null;\n// }\nvar _c;\n$RefreshReg$(_c, \"SpotifyPlayer\");","map":{"version":3,"names":["React","useEffect","useState","SpotifyPlayer","accessToken","currentTrack","window","onSpotifyWebPlaybackSDKReady","player","Spotify","Player","name","getOAuthToken","cb","_c","$RefreshReg$"],"sources":["C:/Users/chris/Desktop/Spotify-Weather/client/src/components/SpotifyPlayer.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst SpotifyPlayer = ({ accessToken, currentTrack }) => {\r\n\t(window.onSpotifyWebPlaybackSDKReady = () => {\r\n\t\tconst player = new Spotify.Player({\r\n\t\t\tname: \"Web Playback SDK Quick Start Player\",\r\n\t\t\tgetOAuthToken: (cb) => {\r\n\t\t\t\tcb(accessToken);\r\n\t\t\t},\r\n\t\t});\r\n\t}),\r\n\t\t[accessToken];\r\n};\r\n\r\nexport default SpotifyPlayer;\r\n// const [player, setPlayer] = useState(null);\r\n// const [isPaused, setPaused] = useState(false);\r\n// useEffect(() => {\r\n// \tconst script = document.createElement(\"script\");\r\n// \tscript.src = \"https://sdk.scdn.co/spotify-player.js\";\r\n// \tscript.async = true;\r\n// \tdocument.body.appendChild(script);\r\n// \twindow.onSpotifyWebPlaybackSDKReady = () => {\r\n// \t\tconst newPlayer = new window.Spotify.Player({\r\n// \t\t\tname: \"React Spotify Player\",\r\n// \t\t\tgetOAuthToken: (cb) => {\r\n// \t\t\t\tcb(accessToken);\r\n// \t\t\t},\r\n// \t\t});\r\n// \t\tsetPlayer(newPlayer);\r\n// \t\tnewPlayer.connect().then((success) => {\r\n// \t\t\tif (success) {\r\n// \t\t\t\tconsole.log(\"Connected to Spotify player!\");\r\n// \t\t\t}\r\n// \t\t});\r\n// \t};\r\n// \treturn () => {\r\n// \t\tif (player !== null) {\r\n// \t\t\tplayer.disconnect();\r\n// \t\t}\r\n// \t};\r\n// }, [accessToken]);\r\n// useEffect(() => {\r\n// \tif (currentTrack?.uri) {\r\n// \t\tplayer.resume();\r\n// \t\tplayer.addListener(\"ready\", ({ device_id }) => {\r\n// \t\t\tplayer._options.id = device_id;\r\n// \t\t\tplayer._options.getOAuthToken((access_token) => {\r\n// \t\t\t\tfetch(`https://api.spotify.com/v1/me/player/play?device_id=${device_id}`, {\r\n// \t\t\t\t\tmethod: \"PUT\",\r\n// \t\t\t\t\tbody: JSON.stringify({ uris: [currentTrack?.uri] }),\r\n// \t\t\t\t\theaders: {\r\n// \t\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n// \t\t\t\t\t\tAuthorization: `Bearer ${access_token}`,\r\n// \t\t\t\t\t},\r\n// \t\t\t\t});\r\n// \t\t\t});\r\n// \t\t});\r\n// \t}\r\n// }, [currentTrack.uri]);\r\n// const handlePreviousTrack = () => {\r\n// \tif (player !== null) {\r\n// \t\tplayer.previousTrack();\r\n// \t}\r\n// };\r\n// const handleTogglePlay = () => {\r\n// \tif (player !== null) {\r\n// \t\tplayer.togglePlay();\r\n// \t\tsetPaused(!isPaused);\r\n// \t}\r\n// };\r\n// const handleNextTrack = () => {\r\n// \tif (player !== null) {\r\n// \t\tplayer.nextTrack();\r\n// \t}\r\n// };\r\n// if (currentTrack != null) {\r\n// \treturn (\r\n// \t\t<div id=\"spotify-player\">\r\n// \t\t\t<div className=\"main-wrapper\">\r\n// \t\t\t\t<img src={currentTrack.album.images[0].url} className=\"now-playing__cover\" alt=\"\" />\r\n// \t\t\t\t<div className=\"now-playing__side\">\r\n// \t\t\t\t\t<div className=\"now-playing__name\">{currentTrack.name}</div>\r\n// \t\t\t\t\t<div className=\"now-playing__artist\">{currentTrack.artists[0].name}</div>\r\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handlePreviousTrack}>\r\n// \t\t\t\t\t\t&lt;&lt;\r\n// \t\t\t\t\t</button>\r\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleTogglePlay}>\r\n// \t\t\t\t\t\t{isPaused ? \"PLAY\" : \"PAUSE\"}\r\n// \t\t\t\t\t</button>\r\n// \t\t\t\t\t<button className=\"btn-spotify\" onClick={handleNextTrack}>\r\n// \t\t\t\t\t\t&gt;&gt;\r\n// \t\t\t\t\t</button>\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t);\r\n// } else {\r\n// \treturn null;\r\n// }\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAa,CAAC,KAAK;EACvDC,MAAM,CAACC,4BAA4B,GAAG,MAAM;IAC5C,MAAMC,MAAM,GAAG,IAAIC,OAAO,CAACC,MAAM,CAAC;MACjCC,IAAI,EAAE,qCAAqC;MAC3CC,aAAa,EAAGC,EAAE,IAAK;QACtBA,EAAE,CAACT,WAAW,CAAC;MAChB;IACD,CAAC,CAAC;EACH,CAAC,EACA,CAACA,WAAW,CAAC;AACf,CAAC;AAACU,EAAA,GAVIX,aAAa;AAYnB,eAAeA,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}